/*
 Copyright 2024 Carnegie Mellon University. All Rights Reserved. 
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Blueprint.Api.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBlueprintApiClient
    {
        /// <summary>
        /// Gets Card Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of Card Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Card>> GetCardTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Card Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of Card Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Card>> GetCardTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Cards by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Cards for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Card>> GetByMselAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Cards by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Cards for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Card>> GetByMselAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Card by id
        /// </summary>
        /// <remarks>
        /// Returns the Card with the id specified
        /// </remarks>
        /// <param name="id">The id of the Card</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> GetCardAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Card by id
        /// </summary>
        /// <remarks>
        /// Returns the Card with the id specified
        /// </remarks>
        /// <param name="id">The id of the Card</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> GetCardAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  Card
        /// </summary>
        /// <remarks>
        /// Updates a Card with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the card parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Card to update</param>
        /// <param name="body">The updated Card values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> UpdateCardAsync(System.Guid id, Card body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  Card
        /// </summary>
        /// <remarks>
        /// Updates a Card with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the card parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Card to update</param>
        /// <param name="body">The updated Card values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> UpdateCardAsync(System.Guid id, Card body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  Card
        /// </summary>
        /// <remarks>
        /// Deletes a  Card with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Card to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  Card
        /// </summary>
        /// <remarks>
        /// Deletes a  Card with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Card to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Card
        /// </summary>
        /// <remarks>
        /// Creates a new Card with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Card</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> CreateCardAsync(Card body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Card
        /// </summary>
        /// <remarks>
        /// Creates a new Card with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Card</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Card> CreateCardAsync(Card body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all CardTeams in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams in the system.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetCardTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all CardTeams in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams in the system.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetCardTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new CardTeam
        /// </summary>
        /// <remarks>
        /// Creates a new CardTeam with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the CardTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> CreateCardTeamAsync(CardTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new CardTeam
        /// </summary>
        /// <remarks>
        /// Creates a new CardTeam with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the CardTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> CreateCardTeamAsync(CardTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all CardTeams for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetMselCardTeamsAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all CardTeams for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetMselCardTeamsAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all CardTeams for a card
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams for the card.
        /// </remarks>
        /// <param name="cardId">The id of the CardTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetCardCardTeamsAsync(System.Guid cardId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all CardTeams for a card
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CardTeams for the card.
        /// </remarks>
        /// <param name="cardId">The id of the CardTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardTeam>> GetCardCardTeamsAsync(System.Guid cardId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific CardTeam by id
        /// </summary>
        /// <remarks>
        /// Returns the CardTeam with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CardTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> GetCardTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific CardTeam by id
        /// </summary>
        /// <remarks>
        /// Returns the CardTeam with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CardTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> GetCardTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CardTeam
        /// </summary>
        /// <remarks>
        /// Deletes a CardTeam with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CardTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CardTeam
        /// </summary>
        /// <remarks>
        /// Deletes a CardTeam with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CardTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  CardTeam
        /// </summary>
        /// <remarks>
        /// Updates a CardTeam with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the cardTeam parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CardTeam to update</param>
        /// <param name="body">The updated CardTeam values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> UpdateCardTeamAsync(System.Guid id, CardTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  CardTeam
        /// </summary>
        /// <remarks>
        /// Updates a CardTeam with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the cardTeam parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CardTeam to update</param>
        /// <param name="body">The updated CardTeam values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CardTeam> UpdateCardTeamAsync(System.Guid id, CardTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CardTeam by card ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a CardTeam with the specified card ID and team ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="cardId">ID of a card.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardTeamByIdsAsync(System.Guid teamId, System.Guid cardId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CardTeam by card ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a CardTeam with the specified card ID and team ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="cardId">ID of a card.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCardTeamByIdsAsync(System.Guid teamId, System.Guid cardId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Catalogs
        /// </summary>
        /// <remarks>
        /// Returns a list of Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetCatalogsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Catalogs
        /// </summary>
        /// <remarks>
        /// Returns a list of Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetCatalogsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Catalog
        /// </summary>
        /// <remarks>
        /// Creates a new Catalog with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> CreateCatalogAsync(Catalog body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Catalog
        /// </summary>
        /// <remarks>
        /// Creates a new Catalog with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> CreateCatalogAsync(Catalog body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Catalogs for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's active Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetMyCatalogsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Catalogs for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's active Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetMyCatalogsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Catalogs for requested user
        /// </summary>
        /// <remarks>
        /// Returns a list of the requested user's active Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetUserCatalogsAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Catalogs for requested user
        /// </summary>
        /// <remarks>
        /// Returns a list of the requested user's active Catalogs.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Catalog>> GetUserCatalogsAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Catalog by id
        /// </summary>
        /// <remarks>
        /// Returns the Catalog with the id specified
        /// </remarks>
        /// <param name="id">The id of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> GetCatalogAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Catalog by id
        /// </summary>
        /// <remarks>
        /// Returns the Catalog with the id specified
        /// </remarks>
        /// <param name="id">The id of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> GetCatalogAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Catalog
        /// </summary>
        /// <remarks>
        /// Updates a Catalog with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the catalog parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Catalog to update</param>
        /// <param name="body">The updated Catalog values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> UpdateCatalogAsync(System.Guid id, Catalog body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Catalog
        /// </summary>
        /// <remarks>
        /// Updates a Catalog with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the catalog parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Catalog to update</param>
        /// <param name="body">The updated Catalog values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> UpdateCatalogAsync(System.Guid id, Catalog body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Catalog
        /// </summary>
        /// <remarks>
        /// Deletes a Catalog with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Catalog to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Catalog
        /// </summary>
        /// <remarks>
        /// Deletes a Catalog with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Catalog to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Catalog by copying an existing Catalog
        /// </summary>
        /// <remarks>
        /// Creates a new Catalog from the specified existing Catalog
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The ID of the Catalog to be copied</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> CopyCatalogAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Catalog by copying an existing Catalog
        /// </summary>
        /// <remarks>
        /// Creates a new Catalog from the specified existing Catalog
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The ID of the Catalog to be copied</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> CopyCatalogAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a json Catalog file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> UploadJsonFilesAsync(System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a json Catalog file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Catalog> UploadJsonFilesAsync(System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download a catalog by id as json file
        /// </summary>
        /// <param name="id">The id of the catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadJsonAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download a catalog by id as json file
        /// </summary>
        /// <param name="id">The id of the catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadJsonAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific CatalogInject by id
        /// </summary>
        /// <remarks>
        /// Returns the CatalogInject with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperCatalog
        /// </remarks>
        /// <param name="id">The id of the CatalogInject</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogInject> GetCatalogInjectAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific CatalogInject by id
        /// </summary>
        /// <remarks>
        /// Returns the CatalogInject with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperCatalog
        /// </remarks>
        /// <param name="id">The id of the CatalogInject</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogInject> GetCatalogInjectAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CatalogInject
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogInject with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="id">The id of the CatalogInject to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogInjectAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CatalogInject
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogInject with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="id">The id of the CatalogInject to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogInjectAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new CatalogInject
        /// </summary>
        /// <remarks>
        /// Creates a new CatalogInject with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="body">The data to create the CatalogInject with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogInject> CreateCatalogInjectAsync(CatalogInject body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new CatalogInject
        /// </summary>
        /// <remarks>
        /// Creates a new CatalogInject with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="body">The data to create the CatalogInject with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogInject> CreateCatalogInjectAsync(CatalogInject body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CatalogInject by catalog ID and inject ID
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogInject with the specified catalog ID and inject ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="catalogId">ID of a catalog.</param>
        /// <param name="injectId">ID of a inject.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogInjectByIdsAsync(System.Guid catalogId, System.Guid injectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CatalogInject by catalog ID and inject ID
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogInject with the specified catalog ID and inject ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperCatalog
        /// </remarks>
        /// <param name="catalogId">ID of a catalog.</param>
        /// <param name="injectId">ID of a inject.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogInjectByIdsAsync(System.Guid catalogId, System.Guid injectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all CatalogUnits for a Catalog
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CatalogUnits for the catalog.
        /// </remarks>
        /// <param name="catalogId">The id of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CatalogUnit>> GetCatalogUnitsAsync(System.Guid catalogId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all CatalogUnits for a Catalog
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the CatalogUnits for the catalog.
        /// </remarks>
        /// <param name="catalogId">The id of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CatalogUnit>> GetCatalogUnitsAsync(System.Guid catalogId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific CatalogUnit by id
        /// </summary>
        /// <remarks>
        /// Returns the CatalogUnit with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CatalogUnit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogUnit> GetCatalogUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific CatalogUnit by id
        /// </summary>
        /// <remarks>
        /// Returns the CatalogUnit with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CatalogUnit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogUnit> GetCatalogUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a CatalogUnit
        /// </summary>
        /// <remarks>
        /// Updates a CatalogUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the CatalogUnit to update</param>
        /// <param name="body">The updated CatalogUnit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateCatalogUnitAsync(System.Guid id, CatalogUnit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a CatalogUnit
        /// </summary>
        /// <remarks>
        /// Updates a CatalogUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the CatalogUnit to update</param>
        /// <param name="body">The updated CatalogUnit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateCatalogUnitAsync(System.Guid id, CatalogUnit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CatalogUnit
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogUnit with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CatalogUnit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CatalogUnit
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogUnit with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the CatalogUnit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new CatalogUnit
        /// </summary>
        /// <remarks>
        /// Creates a new CatalogUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the CatalogUnit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogUnit> CreateCatalogUnitAsync(CatalogUnit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new CatalogUnit
        /// </summary>
        /// <remarks>
        /// Creates a new CatalogUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the CatalogUnit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogUnit> CreateCatalogUnitAsync(CatalogUnit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a CatalogUnit by catalog ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogUnit with the specified catalog ID and unit ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="catalogId">ID of a catalog.</param>
        /// <param name="unitId">ID of a unit.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogUnitByIdsAsync(System.Guid catalogId, System.Guid unitId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a CatalogUnit by catalog ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a CatalogUnit with the specified catalog ID and unit ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="catalogId">ID of a catalog.</param>
        /// <param name="unitId">ID of a unit.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCatalogUnitByIdsAsync(System.Guid catalogId, System.Guid unitId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all ScoringModels
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the ScoringModels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringModel>> GetScoringModelsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all ScoringModels
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the ScoringModels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScoringModel>> GetScoringModelsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all TeamTypes
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the TeamTypes.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamType>> GetTeamTypesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all TeamTypes
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the TeamTypes.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamType>> GetTeamTypesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets CiteAction Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteAction Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteAction>> GetCiteActionTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets CiteAction Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteAction Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteAction>> GetCiteActionTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets CiteActions by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteActions for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteAction>> GetByMsel2Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets CiteActions by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteActions for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteAction>> GetByMsel2Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific CiteAction by id
        /// </summary>
        /// <remarks>
        /// Returns the CiteAction with the id specified
        /// </remarks>
        /// <param name="id">The id of the CiteAction</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> GetCiteActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific CiteAction by id
        /// </summary>
        /// <remarks>
        /// Returns the CiteAction with the id specified
        /// </remarks>
        /// <param name="id">The id of the CiteAction</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> GetCiteActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  CiteAction
        /// </summary>
        /// <remarks>
        /// Updates a CiteAction with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the citeAction parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CiteAction to update</param>
        /// <param name="body">The updated CiteAction values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> UpdateCiteActionAsync(System.Guid id, CiteAction body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  CiteAction
        /// </summary>
        /// <remarks>
        /// Updates a CiteAction with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the citeAction parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CiteAction to update</param>
        /// <param name="body">The updated CiteAction values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> UpdateCiteActionAsync(System.Guid id, CiteAction body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  CiteAction
        /// </summary>
        /// <remarks>
        /// Deletes a  CiteAction with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the CiteAction to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCiteActionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  CiteAction
        /// </summary>
        /// <remarks>
        /// Deletes a  CiteAction with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the CiteAction to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCiteActionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new CiteAction
        /// </summary>
        /// <remarks>
        /// Creates a new CiteAction with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the CiteAction</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> CreateCiteActionAsync(CiteAction body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new CiteAction
        /// </summary>
        /// <remarks>
        /// Creates a new CiteAction with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the CiteAction</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteAction> CreateCiteActionAsync(CiteAction body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets CiteRole Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteRole Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteRole>> GetCiteRoleTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets CiteRole Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteRole Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteRole>> GetCiteRoleTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets CiteRoles by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteRole>> GetByMsel3Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets CiteRoles by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of CiteRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiteRole>> GetByMsel3Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific CiteRole by id
        /// </summary>
        /// <remarks>
        /// Returns the CiteRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the CiteRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> GetCiteRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific CiteRole by id
        /// </summary>
        /// <remarks>
        /// Returns the CiteRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the CiteRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> GetCiteRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  CiteRole
        /// </summary>
        /// <remarks>
        /// Updates a CiteRole with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the citeRole parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CiteRole to update</param>
        /// <param name="body">The updated CiteRole values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> UpdateCiteRoleAsync(System.Guid id, CiteRole body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  CiteRole
        /// </summary>
        /// <remarks>
        /// Updates a CiteRole with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the citeRole parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the CiteRole to update</param>
        /// <param name="body">The updated CiteRole values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> UpdateCiteRoleAsync(System.Guid id, CiteRole body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  CiteRole
        /// </summary>
        /// <remarks>
        /// Deletes a  CiteRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the CiteRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCiteRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  CiteRole
        /// </summary>
        /// <remarks>
        /// Deletes a  CiteRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the CiteRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCiteRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new CiteRole
        /// </summary>
        /// <remarks>
        /// Creates a new CiteRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the CiteRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> CreateCiteRoleAsync(CiteRole body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new CiteRole
        /// </summary>
        /// <remarks>
        /// Creates a new CiteRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the CiteRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CiteRole> CreateCiteRoleAsync(CiteRole body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets DataField Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of DataField Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataField>> GetDataFieldTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets DataField Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of DataField Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataField>> GetDataFieldTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets DataFields by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataFields for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataField>> GetByMsel4Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets DataFields by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataFields for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataField>> GetByMsel4Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific DataField by id
        /// </summary>
        /// <remarks>
        /// Returns the DataField with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataField</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> GetDataFieldAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific DataField by id
        /// </summary>
        /// <remarks>
        /// Returns the DataField with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataField</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> GetDataFieldAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  DataField
        /// </summary>
        /// <remarks>
        /// Updates a DataField with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataField parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataField to update</param>
        /// <param name="body">The updated DataField values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> UpdateDataFieldAsync(System.Guid id, DataField body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  DataField
        /// </summary>
        /// <remarks>
        /// Updates a DataField with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataField parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataField to update</param>
        /// <param name="body">The updated DataField values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> UpdateDataFieldAsync(System.Guid id, DataField body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  DataField
        /// </summary>
        /// <remarks>
        /// Deletes a  DataField with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataField to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteDataFieldAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  DataField
        /// </summary>
        /// <remarks>
        /// Deletes a  DataField with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataField to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteDataFieldAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new DataField
        /// </summary>
        /// <remarks>
        /// Creates a new DataField with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataField</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> CreateDataFieldAsync(DataField body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new DataField
        /// </summary>
        /// <remarks>
        /// Creates a new DataField with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataField</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataField> CreateDataFieldAsync(DataField body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets DataOptions by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataOptions for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataOption>> GetByMsel5Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets DataOptions by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataOptions for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataOption>> GetByMsel5Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets DataOptions by DataField
        /// </summary>
        /// <remarks>
        /// Returns a list of DataOptions for the DataField.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataOption>> GetByDataFieldAsync(System.Guid dataFieldId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets DataOptions by DataField
        /// </summary>
        /// <remarks>
        /// Returns a list of DataOptions for the DataField.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataOption>> GetByDataFieldAsync(System.Guid dataFieldId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific DataOption by id
        /// </summary>
        /// <remarks>
        /// Returns the DataOption with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> GetDataOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific DataOption by id
        /// </summary>
        /// <remarks>
        /// Returns the DataOption with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> GetDataOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  DataOption
        /// </summary>
        /// <remarks>
        /// Updates a DataOption with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataOption parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataOption to update</param>
        /// <param name="body">The updated DataOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> UpdateDataOptionAsync(System.Guid id, DataOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  DataOption
        /// </summary>
        /// <remarks>
        /// Updates a DataOption with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataOption parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataOption to update</param>
        /// <param name="body">The updated DataOption values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> UpdateDataOptionAsync(System.Guid id, DataOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  DataOption
        /// </summary>
        /// <remarks>
        /// Deletes a  DataOption with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDataOptionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  DataOption
        /// </summary>
        /// <remarks>
        /// Deletes a  DataOption with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataOption to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDataOptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new DataOption
        /// </summary>
        /// <remarks>
        /// Creates a new DataOption with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> CreateDataOptionAsync(DataOption body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new DataOption
        /// </summary>
        /// <remarks>
        /// Creates a new DataOption with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataOption</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataOption> CreateDataOptionAsync(DataOption body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets DataValues by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataValues for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataValue>> GetByMsel6Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets DataValues by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of DataValues for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataValue>> GetByMsel6Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific DataValue by id
        /// </summary>
        /// <remarks>
        /// Returns the DataValue with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataValue</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> GetDataValueAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific DataValue by id
        /// </summary>
        /// <remarks>
        /// Returns the DataValue with the id specified
        /// </remarks>
        /// <param name="id">The id of the DataValue</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> GetDataValueAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  DataValue
        /// </summary>
        /// <remarks>
        /// Updates a DataValue with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataValue parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataValue to update</param>
        /// <param name="body">The updated DataValue values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> UpdateDataValueAsync(System.Guid id, DataValue body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  DataValue
        /// </summary>
        /// <remarks>
        /// Updates a DataValue with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the dataValue parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the DataValue to update</param>
        /// <param name="body">The updated DataValue values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> UpdateDataValueAsync(System.Guid id, DataValue body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  DataValue
        /// </summary>
        /// <remarks>
        /// Deletes a  DataValue with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataValue to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDataValueAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  DataValue
        /// </summary>
        /// <remarks>
        /// Deletes a  DataValue with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the DataValue to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDataValueAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new DataValue
        /// </summary>
        /// <remarks>
        /// Creates a new DataValue with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataValue</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> CreateDataValueAsync(DataValue body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new DataValue
        /// </summary>
        /// <remarks>
        /// Creates a new DataValue with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the DataValue</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataValue> CreateDataValueAsync(DataValue body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Checks the liveliness health endpoint
        /// </summary>
        /// <remarks>
        /// Returns a HealthReport of the liveliness health check
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthReport> GetLivelinessAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks the liveliness health endpoint
        /// </summary>
        /// <remarks>
        /// Returns a HealthReport of the liveliness health check
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthReport> GetLivelinessAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Checks the readiness health endpoint
        /// </summary>
        /// <remarks>
        /// Returns a HealthReport of the readiness health check
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthReport> GetReadinessAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks the readiness health endpoint
        /// </summary>
        /// <remarks>
        /// Returns a HealthReport of the readiness health check
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthReport> GetReadinessAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the current version of the API
        /// </summary>
        /// <remarks>
        /// Returns the version.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the current version of the API
        /// </summary>
        /// <remarks>
        /// Returns the version.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Injects for a Catalog
        /// </summary>
        /// <remarks>
        /// Returns a list of Injects for the Catalog.
        /// </remarks>
        /// <param name="catalogId">The ID of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Inject>> GetInjectsByCatalogAsync(System.Guid catalogId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Injects for a Catalog
        /// </summary>
        /// <remarks>
        /// Returns a list of Injects for the Catalog.
        /// </remarks>
        /// <param name="catalogId">The ID of the Catalog</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Inject>> GetInjectsByCatalogAsync(System.Guid catalogId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Inject by id
        /// </summary>
        /// <remarks>
        /// Returns the Inject with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a User that is a member of a Team within the specified Inject
        /// </remarks>
        /// <param name="id">The id of the Inject</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> GetInjectAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Inject by id
        /// </summary>
        /// <remarks>
        /// Returns the Inject with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a User that is a member of a Team within the specified Inject
        /// </remarks>
        /// <param name="id">The id of the Inject</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> GetInjectAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an Inject
        /// </summary>
        /// <remarks>
        /// Updates an Inject with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Inject
        /// </remarks>
        /// <param name="id">The Id of the Inject to update</param>
        /// <param name="body">The updated Inject values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> UpdateInjectAsync(System.Guid id, Inject body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an Inject
        /// </summary>
        /// <remarks>
        /// Updates an Inject with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Inject
        /// </remarks>
        /// <param name="id">The Id of the Inject to update</param>
        /// <param name="body">The updated Inject values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> UpdateInjectAsync(System.Guid id, Inject body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an Inject
        /// </summary>
        /// <remarks>
        /// Deletes an Inject with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Inject
        /// </remarks>
        /// <param name="id">The id of the Inject to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInjectAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an Inject
        /// </summary>
        /// <remarks>
        /// Deletes an Inject with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Inject
        /// </remarks>
        /// <param name="id">The id of the Inject to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInjectAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> CreateInjectAsync(System.Guid catalogId, Inject body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Inject> CreateInjectAsync(System.Guid catalogId, Inject body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all InjectType in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the InjectTypes in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InjectType>> GetInjectTypesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all InjectType in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the InjectTypes in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InjectType>> GetInjectTypesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new InjectType
        /// </summary>
        /// <remarks>
        /// Creates a new InjectType with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the InjectType with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> CreateInjectTypeAsync(InjectType body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new InjectType
        /// </summary>
        /// <remarks>
        /// Creates a new InjectType with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the InjectType with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> CreateInjectTypeAsync(InjectType body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific InjectType by id
        /// </summary>
        /// <remarks>
        /// Returns the InjectType with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The id of the InjectType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> GetInjectTypeAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific InjectType by id
        /// </summary>
        /// <remarks>
        /// Returns the InjectType with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The id of the InjectType</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> GetInjectTypeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a InjectType
        /// </summary>
        /// <remarks>
        /// Updates a InjectType with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated InjectType values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> UpdateInjectTypeAsync(System.Guid id, InjectType body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a InjectType
        /// </summary>
        /// <remarks>
        /// Updates a InjectType with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated InjectType values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InjectType> UpdateInjectTypeAsync(System.Guid id, InjectType body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a InjectType
        /// </summary>
        /// <remarks>
        /// Deletes a InjectType with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The id of the InjectType to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInjectTypeAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a InjectType
        /// </summary>
        /// <remarks>
        /// Deletes a InjectType with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified InjectType
        /// </remarks>
        /// <param name="id">The id of the InjectType to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInjectTypeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Invitations for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Invitations for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invitation>> GetInvitationsAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Invitations for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Invitations for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invitation>> GetInvitationsAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Invitation by id
        /// </summary>
        /// <remarks>
        /// Returns the Invitation with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the Invitation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> GetInvitationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Invitation by id
        /// </summary>
        /// <remarks>
        /// Returns the Invitation with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the Invitation</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> GetInvitationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Invitation
        /// </summary>
        /// <remarks>
        /// Updates a Invitation with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the Invitation to update</param>
        /// <param name="body">The updated Invitation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> UpdateInvitationAsync(System.Guid id, Invitation body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Invitation
        /// </summary>
        /// <remarks>
        /// Updates a Invitation with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the Invitation to update</param>
        /// <param name="body">The updated Invitation values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> UpdateInvitationAsync(System.Guid id, Invitation body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Invitation
        /// </summary>
        /// <remarks>
        /// Deletes a Invitation with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the Invitation to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInvitationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Invitation
        /// </summary>
        /// <remarks>
        /// Deletes a Invitation with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the Invitation to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInvitationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Invitation
        /// </summary>
        /// <remarks>
        /// Creates a new Invitation with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the Invitation with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> CreateInvitationAsync(Invitation body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Invitation
        /// </summary>
        /// <remarks>
        /// Creates a new Invitation with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the Invitation with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Invitation> CreateInvitationAsync(Invitation body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Moves by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Moves for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Move>> GetByMsel7Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Moves by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Moves for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Move>> GetByMsel7Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Move by id
        /// </summary>
        /// <remarks>
        /// Returns the Move with the id specified
        /// </remarks>
        /// <param name="id">The id of the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> GetMoveAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Move by id
        /// </summary>
        /// <remarks>
        /// Returns the Move with the id specified
        /// </remarks>
        /// <param name="id">The id of the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> GetMoveAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  Move
        /// </summary>
        /// <remarks>
        /// Updates a Move with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the move parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Move to update</param>
        /// <param name="body">The updated Move values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> UpdateMoveAsync(System.Guid id, Move body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  Move
        /// </summary>
        /// <remarks>
        /// Updates a Move with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the move parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Move to update</param>
        /// <param name="body">The updated Move values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> UpdateMoveAsync(System.Guid id, Move body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  Move
        /// </summary>
        /// <remarks>
        /// Deletes a  Move with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Move to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMoveAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  Move
        /// </summary>
        /// <remarks>
        /// Deletes a  Move with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Move to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMoveAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Move
        /// </summary>
        /// <remarks>
        /// Creates a new Move with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> CreateMoveAsync(Move body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Move
        /// </summary>
        /// <remarks>
        /// Creates a new Move with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Move</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Move> CreateMoveAsync(Move body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Msels
        /// </summary>
        /// <remarks>
        /// Returns a list of Msels.
        /// </remarks>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="teamId">Whether or not to return records only for a designated team</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMselsAsync(string userId, string teamId, string description);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Msels
        /// </summary>
        /// <remarks>
        /// Returns a list of Msels.
        /// </remarks>
        /// <param name="userId">Whether or not to return records only for a designated user</param>
        /// <param name="teamId">Whether or not to return records only for a designated team</param>
        /// <param name="description">Whether or not to return records only for descriptions containing the designated string</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMselsAsync(string userId, string teamId, string description, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Msel
        /// </summary>
        /// <remarks>
        /// Creates a new Msel with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> CreateMselAsync(Msel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Msel
        /// </summary>
        /// <remarks>
        /// Creates a new Msel with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> CreateMselAsync(Msel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Msels for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's active Msels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyMselsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Msels for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's active Msels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyMselsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Msels the current user can join
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Msels to join.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyJoinMselsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Msels the current user can join
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Msels to join.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyJoinMselsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Msels the current user can launch
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Msels to launch.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyLaunchMselsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Msels the current user can launch
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Msels to launch.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetMyLaunchMselsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Msels for requested user
        /// </summary>
        /// <remarks>
        /// Returns a list of the requested user's active Msels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetUserMselsAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Msels for requested user
        /// </summary>
        /// <remarks>
        /// Returns a list of the requested user's active Msels.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Msel>> GetUserMselsAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Msel by id
        /// </summary>
        /// <remarks>
        /// Returns the Msel with the id specified
        /// </remarks>
        /// <param name="id">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> GetMselAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Msel by id
        /// </summary>
        /// <remarks>
        /// Returns the Msel with the id specified
        /// </remarks>
        /// <param name="id">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> GetMselAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Msel
        /// </summary>
        /// <remarks>
        /// Updates a Msel with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the msel parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Msel to update</param>
        /// <param name="body">The updated Msel values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> UpdateMselAsync(System.Guid id, Msel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Msel
        /// </summary>
        /// <remarks>
        /// Updates a Msel with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the msel parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Msel to update</param>
        /// <param name="body">The updated Msel values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> UpdateMselAsync(System.Guid id, Msel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Msel
        /// </summary>
        /// <remarks>
        /// Deletes a Msel with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Msel to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Msel
        /// </summary>
        /// <remarks>
        /// Deletes a Msel with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Msel to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets specific Msel data by id
        /// </summary>
        /// <remarks>
        /// Returns a DataTable for the Msel with the id specified
        /// </remarks>
        /// <param name="id">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataTable> GetMselDataAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets specific Msel data by id
        /// </summary>
        /// <remarks>
        /// Returns a DataTable for the Msel with the id specified
        /// </remarks>
        /// <param name="id">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataTable> GetMselDataAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new MSEL by copying an existing MSEL
        /// </summary>
        /// <remarks>
        /// Creates a new MSEL from the specified existing MSEL
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The ID of the MSEL to be copied</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> CopyMselAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new MSEL by copying an existing MSEL
        /// </summary>
        /// <remarks>
        /// Creates a new MSEL from the specified existing MSEL
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The ID of the MSEL to be copied</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> CopyMselAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a User Role to a Msel
        /// </summary>
        /// <remarks>
        /// Adds the User Role specified to the MSEL specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or a MSEL owner
        /// </remarks>
        /// <param name="userId">The ID of the User</param>
        /// <param name="mselId">The ID of the Msel to update</param>
        /// <param name="mselRole">The MSEL Role to add</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> AddUserMselRoleAsync(System.Guid userId, System.Guid mselId, MselRole mselRole);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a User Role to a Msel
        /// </summary>
        /// <remarks>
        /// Adds the User Role specified to the MSEL specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or a MSEL owner
        /// </remarks>
        /// <param name="userId">The ID of the User</param>
        /// <param name="mselId">The ID of the Msel to update</param>
        /// <param name="mselRole">The MSEL Role to add</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> AddUserMselRoleAsync(System.Guid userId, System.Guid mselId, MselRole mselRole, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes a User Role from a Msel
        /// </summary>
        /// <remarks>
        /// Removes the User Role specified from the MSEL specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or a MSEL owner
        /// </remarks>
        /// <param name="userId">The ID of the User</param>
        /// <param name="mselId">The ID of the Msel to update</param>
        /// <param name="mselRole">The MSEL Role to add</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> RemoveUserMselRoleAsync(System.Guid userId, System.Guid mselId, MselRole mselRole);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a User Role from a Msel
        /// </summary>
        /// <remarks>
        /// Removes the User Role specified from the MSEL specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or a MSEL owner
        /// </remarks>
        /// <param name="userId">The ID of the User</param>
        /// <param name="mselId">The ID of the Msel to update</param>
        /// <param name="mselRole">The MSEL Role to add</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> RemoveUserMselRoleAsync(System.Guid userId, System.Guid mselId, MselRole mselRole, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// File objects will be returned in the same order as their respective files within the form.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadXlsxAsync(System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// File objects will be returned in the same order as their respective files within the form.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadXlsxAsync(System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Replace a msel by id with data in xlsx file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ReplaceWithXlsxFileAsync(System.Guid id, System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace a msel by id with data in xlsx file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ReplaceWithXlsxFileAsync(System.Guid id, System.Guid? mselId, System.Guid? mselTemplateId, System.Guid? teamId, FileParameter toUpload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download a msel by id as xlsx file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadXlsxAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download a msel by id as xlsx file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadXlsxAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a json MSEL file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadJsonFiles2Async(string contentType, string contentDisposition, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, long? length, string name, string fileName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a json MSEL file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadJsonFiles2Async(string contentType, string contentDisposition, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, long? length, string name, string fileName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download a msel by id as json file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadJson2Async(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download a msel by id as json file
        /// </summary>
        /// <param name="id">The id of the msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadJson2Async(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Push Integrations
        /// </summary>
        /// <remarks>
        /// Pushes all MSEL Integrations to the associated applications
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL owner
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> PushIntegrationsAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Push Integrations
        /// </summary>
        /// <remarks>
        /// Pushes all MSEL Integrations to the associated applications
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL owner
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> PushIntegrationsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Pull Integrations
        /// </summary>
        /// <remarks>
        /// Pulls all Integrations from the associated applications
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or Msel Owner
        /// </remarks>
        /// <param name="id">The id of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> PullIntegrationsAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pull Integrations
        /// </summary>
        /// <remarks>
        /// Pulls all Integrations from the associated applications
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or Msel Owner
        /// </remarks>
        /// <param name="id">The id of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> PullIntegrationsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// End the MSEL deployment and archive it
        /// </summary>
        /// <remarks>
        /// Pulls all Integrations from the associated applications and changes MSEL staus to Archived
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL Owner
        /// </remarks>
        /// <param name="id">The id of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> ArchiveAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// End the MSEL deployment and archive it
        /// </summary>
        /// <remarks>
        /// Pulls all Integrations from the associated applications and changes MSEL staus to Archived
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL Owner
        /// </remarks>
        /// <param name="id">The id of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> ArchiveAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Join a MSEL by invitation
        /// </summary>
        /// <remarks>
        /// Joins the user to the msel based on a valid invitation
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> JoinMselByInvitationAsync(System.Guid mselId, string teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Join a MSEL by invitation
        /// </summary>
        /// <remarks>
        /// Joins the user to the msel based on a valid invitation
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> JoinMselByInvitationAsync(System.Guid mselId, string teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Launch a MSEL by invitation
        /// </summary>
        /// <remarks>
        /// Launches the msel and joins the user to the team indicated by a valid invitation
        /// <br/>&lt;para /&gt;
        /// <br/>Returns the Player View ID that is being created
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> LaunchMselByInvitationAsync(System.Guid mselId, string teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Launch a MSEL by invitation
        /// </summary>
        /// <remarks>
        /// Launches the msel and joins the user to the team indicated by a valid invitation
        /// <br/>&lt;para /&gt;
        /// <br/>Returns the Player View ID that is being created
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Msel> LaunchMselByInvitationAsync(System.Guid mselId, string teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all MselPages for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the MselPages for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MselPage>> GetMselPagesAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all MselPages for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the MselPages for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MselPage>> GetMselPagesAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific MselPage by id
        /// </summary>
        /// <remarks>
        /// Returns the MselPage with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselPage</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> GetMselPageAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific MselPage by id
        /// </summary>
        /// <remarks>
        /// Returns the MselPage with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselPage</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> GetMselPageAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a MselPage
        /// </summary>
        /// <remarks>
        /// Updates a MselPage with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the MselPage to update</param>
        /// <param name="body">The updated MselPage values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> UpdateMselPageAsync(System.Guid id, MselPage body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a MselPage
        /// </summary>
        /// <remarks>
        /// Updates a MselPage with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the MselPage to update</param>
        /// <param name="body">The updated MselPage values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> UpdateMselPageAsync(System.Guid id, MselPage body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a MselPage
        /// </summary>
        /// <remarks>
        /// Deletes a MselPage with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselPage to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselPageAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a MselPage
        /// </summary>
        /// <remarks>
        /// Deletes a MselPage with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselPage to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselPageAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new MselPage
        /// </summary>
        /// <remarks>
        /// Creates a new MselPage with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the MselPage with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> CreateMselPageAsync(MselPage body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new MselPage
        /// </summary>
        /// <remarks>
        /// Creates a new MselPage with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the MselPage with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselPage> CreateMselPageAsync(MselPage body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all MselUnits for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the MselUnits for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MselUnit>> GetMselUnitsAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all MselUnits for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the MselUnits for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MselUnit>> GetMselUnitsAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific MselUnit by id
        /// </summary>
        /// <remarks>
        /// Returns the MselUnit with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselUnit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselUnit> GetMselUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific MselUnit by id
        /// </summary>
        /// <remarks>
        /// Returns the MselUnit with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselUnit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselUnit> GetMselUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a MselUnit
        /// </summary>
        /// <remarks>
        /// Updates a MselUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the MselUnit to update</param>
        /// <param name="body">The updated MselUnit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateMselUnitAsync(System.Guid id, MselUnit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a MselUnit
        /// </summary>
        /// <remarks>
        /// Updates a MselUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The Id of the MselUnit to update</param>
        /// <param name="body">The updated MselUnit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateMselUnitAsync(System.Guid id, MselUnit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a MselUnit
        /// </summary>
        /// <remarks>
        /// Deletes a MselUnit with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselUnit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a MselUnit
        /// </summary>
        /// <remarks>
        /// Deletes a MselUnit with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the MselUnit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new MselUnit
        /// </summary>
        /// <remarks>
        /// Creates a new MselUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the MselUnit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselUnit> CreateMselUnitAsync(MselUnit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new MselUnit
        /// </summary>
        /// <remarks>
        /// Creates a new MselUnit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the MselUnit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MselUnit> CreateMselUnitAsync(MselUnit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a MselUnit by msel ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a MselUnit with the specified msel ID and unit ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="mselId">ID of a msel.</param>
        /// <param name="unitId">ID of a unit.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselUnitByIdsAsync(System.Guid mselId, System.Guid unitId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a MselUnit by msel ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a MselUnit with the specified msel ID and unit ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="mselId">ID of a msel.</param>
        /// <param name="unitId">ID of a unit.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMselUnitByIdsAsync(System.Guid mselId, System.Guid unitId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Organization Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of Organization Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Organization>> GetOrganizationTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Organization Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of Organization Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Organization>> GetOrganizationTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Organizations by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Organizations for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Organization>> GetByMsel8Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Organizations by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of Organizations for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Organization>> GetByMsel8Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Organization by id
        /// </summary>
        /// <remarks>
        /// Returns the Organization with the id specified
        /// </remarks>
        /// <param name="id">The id of the Organization</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> GetOrganizationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Organization by id
        /// </summary>
        /// <remarks>
        /// Returns the Organization with the id specified
        /// </remarks>
        /// <param name="id">The id of the Organization</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> GetOrganizationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  Organization
        /// </summary>
        /// <remarks>
        /// Updates a Organization with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the organization parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Organization to update</param>
        /// <param name="body">The updated Organization values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(System.Guid id, Organization body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  Organization
        /// </summary>
        /// <remarks>
        /// Updates a Organization with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the organization parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the Organization to update</param>
        /// <param name="body">The updated Organization values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(System.Guid id, Organization body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  Organization
        /// </summary>
        /// <remarks>
        /// Deletes a  Organization with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Organization to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteOrganizationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  Organization
        /// </summary>
        /// <remarks>
        /// Deletes a  Organization with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the Organization to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteOrganizationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// Creates a new Organization with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Organization</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> CreateOrganizationAsync(Organization body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// Creates a new Organization with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the Organization</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Organization> CreateOrganizationAsync(Organization body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Permission in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Permissions in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Permission in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Permissions in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Permission
        /// </summary>
        /// <remarks>
        /// Creates a new Permission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Permission
        /// </summary>
        /// <remarks>
        /// Creates a new Permission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Permissions for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Permissions.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Permissions for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Permissions.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Permissions for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Permissions.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Permissions for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Permissions.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Permission by id
        /// </summary>
        /// <remarks>
        /// Returns the Permission with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified Permission
        /// </remarks>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Permission by id
        /// </summary>
        /// <remarks>
        /// Returns the Permission with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified Permission
        /// </remarks>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Permission
        /// </summary>
        /// <remarks>
        /// Updates a Permission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Permission
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Permission
        /// </summary>
        /// <remarks>
        /// Updates a Permission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Permission
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Permission
        /// </summary>
        /// <remarks>
        /// Deletes a Permission with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Permission
        /// </remarks>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Permission
        /// </summary>
        /// <remarks>
        /// Deletes a Permission with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Permission
        /// </remarks>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all ApplicationTemplates
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the ApplicationTemplates.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationTemplate>> GetApplicationTemplatesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all ApplicationTemplates
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the ApplicationTemplates.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationTemplate>> GetApplicationTemplatesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets PlayerApplications by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of PlayerApplications for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplication>> GetByMsel9Async(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets PlayerApplications by msel
        /// </summary>
        /// <remarks>
        /// Returns a list of PlayerApplications for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplication>> GetByMsel9Async(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific PlayerApplication by id
        /// </summary>
        /// <remarks>
        /// Returns the PlayerApplication with the id specified
        /// </remarks>
        /// <param name="id">The id of the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> GetPlayerApplicationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific PlayerApplication by id
        /// </summary>
        /// <remarks>
        /// Returns the PlayerApplication with the id specified
        /// </remarks>
        /// <param name="id">The id of the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> GetPlayerApplicationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  PlayerApplication
        /// </summary>
        /// <remarks>
        /// Updates a PlayerApplication with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the playerApplication parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the PlayerApplication to update</param>
        /// <param name="body">The updated PlayerApplication values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> UpdatePlayerApplicationAsync(System.Guid id, PlayerApplication body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  PlayerApplication
        /// </summary>
        /// <remarks>
        /// Updates a PlayerApplication with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the playerApplication parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the PlayerApplication to update</param>
        /// <param name="body">The updated PlayerApplication values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> UpdatePlayerApplicationAsync(System.Guid id, PlayerApplication body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a  PlayerApplication
        /// </summary>
        /// <remarks>
        /// Deletes a  PlayerApplication with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the PlayerApplication to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a  PlayerApplication
        /// </summary>
        /// <remarks>
        /// Deletes a  PlayerApplication with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The id of the PlayerApplication to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new PlayerApplication
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplication with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> CreatePlayerApplicationAsync(PlayerApplication body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new PlayerApplication
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplication with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="body">The data used to create the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> CreatePlayerApplicationAsync(PlayerApplication body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new PlayerApplication and pushes to a Player View
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplication with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL owner
        /// </remarks>
        /// <param name="body">The data used to create the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> CreateAndPushPlayerApplicationAsync(PlayerApplication body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new PlayerApplication and pushes to a Player View
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplication with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or MSEL owner
        /// </remarks>
        /// <param name="body">The data used to create the PlayerApplication</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplication> CreateAndPushPlayerApplicationAsync(PlayerApplication body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all PlayerApplicationTeams in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams in the system.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetPlayerApplicationTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all PlayerApplicationTeams in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams in the system.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetPlayerApplicationTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplicationTeam with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the PlayerApplicationTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> CreatePlayerApplicationTeamAsync(PlayerApplicationTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Creates a new PlayerApplicationTeam with the attributes specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="body">The data to create the PlayerApplicationTeam with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> CreatePlayerApplicationTeamAsync(PlayerApplicationTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all PlayerApplicationTeams for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetMselPlayerApplicationTeamsAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all PlayerApplicationTeams for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams for the msel.
        /// </remarks>
        /// <param name="mselId">The id of the Msel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetMselPlayerApplicationTeamsAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all PlayerApplicationTeams for a playerApplication
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams for the playerApplication.
        /// </remarks>
        /// <param name="playerApplicationId">The id of the PlayerApplicationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetPlayerApplicationPlayerApplicationTeamsAsync(System.Guid playerApplicationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all PlayerApplicationTeams for a playerApplication
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the PlayerApplicationTeams for the playerApplication.
        /// </remarks>
        /// <param name="playerApplicationId">The id of the PlayerApplicationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerApplicationTeam>> GetPlayerApplicationPlayerApplicationTeamsAsync(System.Guid playerApplicationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific PlayerApplicationTeam by id
        /// </summary>
        /// <remarks>
        /// Returns the PlayerApplicationTeam with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the PlayerApplicationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> GetPlayerApplicationTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific PlayerApplicationTeam by id
        /// </summary>
        /// <remarks>
        /// Returns the PlayerApplicationTeam with the id specified
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the PlayerApplicationTeam</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> GetPlayerApplicationTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Deletes a PlayerApplicationTeam with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the PlayerApplicationTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Deletes a PlayerApplicationTeam with the specified id
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="id">The id of the PlayerApplicationTeam to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Updates a PlayerApplicationTeam with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the playerApplicationTeam parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the PlayerApplicationTeam to update</param>
        /// <param name="body">The updated PlayerApplicationTeam values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> UpdatePlayerApplicationTeamAsync(System.Guid id, PlayerApplicationTeam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  PlayerApplicationTeam
        /// </summary>
        /// <remarks>
        /// Updates a PlayerApplicationTeam with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the playerApplicationTeam parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the PlayerApplicationTeam to update</param>
        /// <param name="body">The updated PlayerApplicationTeam values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerApplicationTeam> UpdatePlayerApplicationTeamAsync(System.Guid id, PlayerApplicationTeam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a PlayerApplicationTeam by playerApplication ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a PlayerApplicationTeam with the specified playerApplication ID and team ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="playerApplicationId">ID of a playerApplication.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationTeamByIdsAsync(System.Guid teamId, System.Guid playerApplicationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a PlayerApplicationTeam by playerApplication ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a PlayerApplicationTeam with the specified playerApplication ID and team ID
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="playerApplicationId">ID of a playerApplication.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlayerApplicationTeamByIdsAsync(System.Guid teamId, System.Guid playerApplicationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets ScenarioEvents for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of ScenarioEvents for the MSEL.
        /// </remarks>
        /// <param name="mselId">The ID of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScenarioEvent>> GetScenarioEventsByMselAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets ScenarioEvents for a MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of ScenarioEvents for the MSEL.
        /// </remarks>
        /// <param name="mselId">The ID of the MSEL</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScenarioEvent>> GetScenarioEventsByMselAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific ScenarioEvent by id
        /// </summary>
        /// <remarks>
        /// Returns the ScenarioEvent with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a User that is a member of a Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The id of the ScenarioEvent</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> GetScenarioEventAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific ScenarioEvent by id
        /// </summary>
        /// <remarks>
        /// Returns the ScenarioEvent with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a User that is a member of a Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The id of the ScenarioEvent</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> GetScenarioEventAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates an ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Updates an ScenarioEvent with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The Id of the ScenarioEvent to update</param>
        /// <param name="body">The updated ScenarioEvent values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> UpdateScenarioEventAsync(System.Guid id, ScenarioEvent body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Updates an ScenarioEvent with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The Id of the ScenarioEvent to update</param>
        /// <param name="body">The updated ScenarioEvent values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> UpdateScenarioEventAsync(System.Guid id, ScenarioEvent body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes an ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Deletes an ScenarioEvent with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The id of the ScenarioEvent to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioEventAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Deletes an ScenarioEvent with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent
        /// </remarks>
        /// <param name="id">The id of the ScenarioEvent to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioEventAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Creates a new ScenarioEvent with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the ScenarioEvent with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> CreateScenarioEventAsync(ScenarioEvent body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new ScenarioEvent
        /// </summary>
        /// <remarks>
        /// Creates a new ScenarioEvent with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the ScenarioEvent with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioEvent> CreateScenarioEventAsync(ScenarioEvent body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes multiple ScenarioEvents
        /// </summary>
        /// <remarks>
        /// Deletes the ScenarioEvents specified
        /// </remarks>
        /// <param name="body">The list of ScenarioEvent IDs to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BatchDeleteScenarioEventsAsync(System.Collections.Generic.IEnumerable<System.Guid> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes multiple ScenarioEvents
        /// </summary>
        /// <remarks>
        /// Deletes the ScenarioEvents specified
        /// </remarks>
        /// <param name="body">The list of ScenarioEvent IDs to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BatchDeleteScenarioEventsAsync(System.Collections.Generic.IEnumerable<System.Guid> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Team in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Teams in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Team in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Teams in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Team
        /// </summary>
        /// <remarks>
        /// Creates a new Team with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Team with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Team
        /// </summary>
        /// <remarks>
        /// Creates a new Team with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Team with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamAsync(Team body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Teams.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetMyTeamsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Teams.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetMyTeamsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the specified MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of the Teams for the specified MSEL.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByMselAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the specified MSEL
        /// </summary>
        /// <remarks>
        /// Returns a list of the Teams for the specified MSEL.
        /// <br/>&lt;para /&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByMselAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Teams for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Teams.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByUserAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Teams for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Teams.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Team>> GetTeamsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Team by id
        /// </summary>
        /// <remarks>
        /// Returns the Team with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified Team
        /// </remarks>
        /// <param name="id">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> GetTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Team by id
        /// </summary>
        /// <remarks>
        /// Returns the Team with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Team within the specified Team
        /// </remarks>
        /// <param name="id">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> GetTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Team
        /// </summary>
        /// <remarks>
        /// Updates a Team with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Team
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Team values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync(System.Guid id, Team body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Team
        /// </summary>
        /// <remarks>
        /// Updates a Team with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Team
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Team values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync(System.Guid id, Team body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Team
        /// </summary>
        /// <remarks>
        /// Deletes a Team with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Team
        /// </remarks>
        /// <param name="id">The id of the Team to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Team
        /// </summary>
        /// <remarks>
        /// Deletes a Team with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Team within the specified Team
        /// </remarks>
        /// <param name="id">The id of the Team to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Team for a MSEL from a Unit
        /// </summary>
        /// <remarks>
        /// Creates a new Team on the specified MSEL from the specified Unit
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only an Administrator or MSEL Owner
        /// </remarks>
        /// <param name="mselId">The MSEL to create the Team on</param>
        /// <param name="unitId">The Unit to create the Team from</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamFromUnitAsync(System.Guid mselId, System.Guid unitId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Team for a MSEL from a Unit
        /// </summary>
        /// <remarks>
        /// Creates a new Team on the specified MSEL from the specified Unit
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only an Administrator or MSEL Owner
        /// </remarks>
        /// <param name="mselId">The MSEL to create the Team on</param>
        /// <param name="unitId">The Unit to create the Team from</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CreateTeamFromUnitAsync(System.Guid mselId, System.Guid unitId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets TeamUsers for the specified msel
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified msel's TeamUsers.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to an msel user
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetMselTeamUsersAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets TeamUsers for the specified msel
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified msel's TeamUsers.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to an msel user
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetMselTeamUsersAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets TeamUsers for the specified team
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified team's TeamUsers.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to an msel user
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetTeamTeamUsersAsync(System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets TeamUsers for the specified team
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified team's TeamUsers.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to an msel user
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamUser>> GetTeamTeamUsersAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific TeamUser by id
        /// </summary>
        /// <remarks>
        /// Returns the TeamUser with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the TeamUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> GetTeamUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific TeamUser by id
        /// </summary>
        /// <remarks>
        /// Returns the TeamUser with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the TeamUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> GetTeamUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a TeamUser
        /// </summary>
        /// <remarks>
        /// Deletes a TeamUser with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the TeamUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a TeamUser
        /// </summary>
        /// <remarks>
        /// Deletes a TeamUser with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the TeamUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new TeamUser
        /// </summary>
        /// <remarks>
        /// Creates a new TeamUser with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the TeamUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> CreateTeamUserAsync(TeamUser body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new TeamUser
        /// </summary>
        /// <remarks>
        /// Creates a new TeamUser with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the TeamUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamUser> CreateTeamUserAsync(TeamUser body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a TeamUser by user ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a TeamUser with the specified user ID and team ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserByIdsAsync(System.Guid teamId, System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a TeamUser by user ID and team ID
        /// </summary>
        /// <remarks>
        /// Deletes a TeamUser with the specified user ID and team ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="teamId">ID of a team.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamUserByIdsAsync(System.Guid teamId, System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Unit in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Units in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetUnitsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Unit in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Units in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetUnitsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Unit
        /// </summary>
        /// <remarks>
        /// Creates a new Unit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Unit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> CreateUnitAsync(Unit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Unit
        /// </summary>
        /// <remarks>
        /// Creates a new Unit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or an Administrator
        /// </remarks>
        /// <param name="body">The data to create the Unit with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> CreateUnitAsync(Unit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Units for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Units.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetMyUnitsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Units for the current user
        /// </summary>
        /// <remarks>
        /// Returns a list of the current user's Units.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetMyUnitsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets Units for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Units.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetUnitsByUserAsync(System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets Units for the specified user
        /// </summary>
        /// <remarks>
        /// Returns a list of the specified user's Units.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Unit>> GetUnitsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific Unit by id
        /// </summary>
        /// <remarks>
        /// Returns the Unit with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The id of the Unit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> GetUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific Unit by id
        /// </summary>
        /// <remarks>
        /// Returns the Unit with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible to a SuperUser or a User that is a member of a Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The id of the Unit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> GetUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Unit
        /// </summary>
        /// <remarks>
        /// Updates a Unit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Unit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateUnitAsync(System.Guid id, Unit body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Unit
        /// </summary>
        /// <remarks>
        /// Updates a Unit with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Unit values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Unit> UpdateUnitAsync(System.Guid id, Unit body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Unit
        /// </summary>
        /// <remarks>
        /// Deletes a Unit with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The id of the Unit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Unit
        /// </summary>
        /// <remarks>
        /// Deletes a Unit with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser or a User on an Admin Unit within the specified Unit
        /// </remarks>
        /// <param name="id">The id of the Unit to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all UnitUsers in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UnitUsers in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnitUser>> GetUnitUsersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all UnitUsers in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UnitUsers in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnitUser>> GetUnitUsersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new UnitUser
        /// </summary>
        /// <remarks>
        /// Creates a new UnitUser with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UnitUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitUser> CreateUnitUserAsync(UnitUser body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new UnitUser
        /// </summary>
        /// <remarks>
        /// Creates a new UnitUser with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UnitUser with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitUser> CreateUnitUserAsync(UnitUser body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific UnitUser by id
        /// </summary>
        /// <remarks>
        /// Returns the UnitUser with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UnitUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitUser> GetUnitUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific UnitUser by id
        /// </summary>
        /// <remarks>
        /// Returns the UnitUser with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UnitUser</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitUser> GetUnitUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UnitUser
        /// </summary>
        /// <remarks>
        /// Deletes a UnitUser with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UnitUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UnitUser
        /// </summary>
        /// <remarks>
        /// Deletes a UnitUser with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UnitUser to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UnitUser by user ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a UnitUser with the specified user ID and unit ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="unitId">ID of a unit.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitUserByIdsAsync(System.Guid unitId, System.Guid userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UnitUser by user ID and unit ID
        /// </summary>
        /// <remarks>
        /// Deletes a UnitUser with the specified user ID and unit ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="unitId">ID of a unit.</param>
        /// <param name="userId">ID of a user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUnitUserByIdsAsync(System.Guid unitId, System.Guid userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Users in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Users in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new User
        /// </summary>
        /// <remarks>
        /// Creates a new User with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new User
        /// </summary>
        /// <remarks>
        /// Creates a new User with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific User by id
        /// </summary>
        /// <remarks>
        /// Returns the User with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific User by id
        /// </summary>
        /// <remarks>
        /// Returns the User with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a  User
        /// </summary>
        /// <remarks>
        /// Updates a User with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the user parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the User to update</param>
        /// <param name="body">The updated User values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UpdateUserAsync(System.Guid id, User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a  User
        /// </summary>
        /// <remarks>
        /// Updates a User with the attributes specified.
        /// <br/>The ID from the route MUST MATCH the ID contained in the user parameter
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a ContentDeveloper or an Administrator
        /// </remarks>
        /// <param name="id">The Id of the User to update</param>
        /// <param name="body">The updated User values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UpdateUserAsync(System.Guid id, User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Deletes a User with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Deletes a User with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Users for a team
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users on the team.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="teamId">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetTeamUsersAsync(System.Guid teamId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Users for a team
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users on the team.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="teamId">The id of the Team</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetTeamUsersAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all Users for a unit
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users on the unit.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="unitId">The id of the Unit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUnitUsers2Async(System.Guid unitId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all Users for a unit
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the Users on the unit.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="unitId">The id of the Unit</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUnitUsers2Async(System.Guid unitId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all UserMselRoles for the msel
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserMselRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMselRole>> GetUserMselRolesByMselAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all UserMselRoles for the msel
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserMselRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMselRole>> GetUserMselRolesByMselAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific UserMselRole by id
        /// </summary>
        /// <remarks>
        /// Returns the UserMselRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the UserMselRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserMselRole> GetUserMselRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific UserMselRole by id
        /// </summary>
        /// <remarks>
        /// Returns the UserMselRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the UserMselRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserMselRole> GetUserMselRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserMselRole
        /// </summary>
        /// <remarks>
        /// Deletes a UserMselRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserMselRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserMselRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserMselRole
        /// </summary>
        /// <remarks>
        /// Deletes a UserMselRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserMselRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserMselRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new UserMselRole
        /// </summary>
        /// <remarks>
        /// Creates a new UserMselRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserMselRole with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserMselRole> CreateUserMselRoleAsync(UserMselRole body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new UserMselRole
        /// </summary>
        /// <remarks>
        /// Creates a new UserMselRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserMselRole with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserMselRole> CreateUserMselRoleAsync(UserMselRole body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all UserPermissions in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserPermissions in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all UserPermissions in the system
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserPermissions in the system.
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new UserPermission
        /// </summary>
        /// <remarks>
        /// Creates a new UserPermission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new UserPermission
        /// </summary>
        /// <remarks>
        /// Creates a new UserPermission with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific UserPermission by id
        /// </summary>
        /// <remarks>
        /// Returns the UserPermission with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific UserPermission by id
        /// </summary>
        /// <remarks>
        /// Returns the UserPermission with the id specified
        /// <br/>&lt;para /&gt;
        /// <br/>Only accessible to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserPermission
        /// </summary>
        /// <remarks>
        /// Deletes a UserPermission with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserPermission
        /// </summary>
        /// <remarks>
        /// Deletes a UserPermission with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserPermission by user ID and permission ID
        /// </summary>
        /// <remarks>
        /// Deletes a UserPermission with the specified user ID and permission ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserPermission by user ID and permission ID
        /// </summary>
        /// <remarks>
        /// Deletes a UserPermission with the specified user ID and permission ID
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all UserTeamRoles for the msel
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserTeamRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserTeamRole>> GetUserTeamRolesByMselAsync(System.Guid mselId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all UserTeamRoles for the msel
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the UserTeamRoles for the msel.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserTeamRole>> GetUserTeamRolesByMselAsync(System.Guid mselId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a specific UserTeamRole by id
        /// </summary>
        /// <remarks>
        /// Returns the UserTeamRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the UserTeamRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserTeamRole> GetUserTeamRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a specific UserTeamRole by id
        /// </summary>
        /// <remarks>
        /// Returns the UserTeamRole with the id specified
        /// </remarks>
        /// <param name="id">The id of the UserTeamRole</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserTeamRole> GetUserTeamRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a UserTeamRole
        /// </summary>
        /// <remarks>
        /// Deletes a UserTeamRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserTeamRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserTeamRoleAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a UserTeamRole
        /// </summary>
        /// <remarks>
        /// Deletes a UserTeamRole with the specified id
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="id">The id of the UserTeamRole to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserTeamRoleAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new UserTeamRole
        /// </summary>
        /// <remarks>
        /// Creates a new UserTeamRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserTeamRole with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserTeamRole> CreateUserTeamRoleAsync(UserTeamRole body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new UserTeamRole
        /// </summary>
        /// <remarks>
        /// Creates a new UserTeamRole with the attributes specified
        /// <br/>&lt;para /&gt;
        /// <br/>Accessible only to a SuperUser
        /// </remarks>
        /// <param name="body">The data to create the UserTeamRole with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserTeamRole> CreateUserTeamRoleAsync(UserTeamRole body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationTemplate
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Uri Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Icon { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("embeddable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Embeddable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loadInBackground")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LoadInBackground { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assembly
    {

        [System.Text.Json.Serialization.JsonPropertyName("definedTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<TypeInfo> DefinedTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exportedTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Type> ExportedTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("codeBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CodeBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entryPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo EntryPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("imageRuntimeVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ImageRuntimeVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDynamic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDynamic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Location { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectionOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReflectionOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFullyTrusted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFullyTrusted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("escapedCodeBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string EscapedCodeBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("manifestModule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module ManifestModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modules")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Module> Modules { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("globalAssemblyCache")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public bool GlobalAssemblyCache { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostContext")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long HostContext { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityRuleSet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SecurityRuleSet SecurityRuleSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calendar
    {

        [System.Text.Json.Serialization.JsonPropertyName("minSupportedDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset MinSupportedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxSupportedDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset MaxSupportedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algorithmType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CalendarAlgorithmType AlgorithmType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eras")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int> Eras { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoDigitYearMax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TwoDigitYearMax { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarAlgorithmType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SolarCalendar")]
        SolarCalendar = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LunarCalendar")]
        LunarCalendar = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LunisolarCalendar")]
        LunisolarCalendar = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarWeekRule
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FirstDay")]
        FirstDay = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FirstFullWeek")]
        FirstFullWeek = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FirstFourDayWeek")]
        FirstFourDayWeek = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CallingConventions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VarArgs")]
        VarArgs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HasThis")]
        HasThis = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ExplicitThis")]
        ExplicitThis = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Card
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("move")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Move { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Inject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? GalleryId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CardTeam
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cardId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CardId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isShownOnWall")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsShownOnWall { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canPostArticles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanPostArticles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Catalog
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid InjectTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Catalog Parent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injects")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Inject> Injects { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("units")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Unit> Units { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogInject
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("catalogId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CatalogId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid InjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Inject Inject { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogUnit
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("catalogId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CatalogId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UnitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Unit Unit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiteAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Msel Msel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Team Team { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int InjectNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ActionNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiteRole
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Msel Msel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("team")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Team Team { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompareInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SortVersion Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lcid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConstructorInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeMethodHandle MethodHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CultureInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("parent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CultureInfo Parent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lcid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyboardLayoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int KeyboardLayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ietfLanguageTag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string IetfLanguageTag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nativeName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NativeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("englishName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string EnglishName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoLetterISOLanguageName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TwoLetterISOLanguageName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("threeLetterISOLanguageName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ThreeLetterISOLanguageName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("threeLetterWindowsLanguageName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ThreeLetterWindowsLanguageName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("compareInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CompareInfo CompareInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("textInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TextInfo TextInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNeutralCulture")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNeutralCulture { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cultureTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CultureTypes CultureTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NumberFormatInfo NumberFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateTimeFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public DateTimeFormatInfo DateTimeFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calendar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Calendar Calendar { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("optionalCalendars")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Calendar> OptionalCalendars { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("useUserOverride")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseUserOverride { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CultureTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NeutralCultures")]
        NeutralCultures = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecificCultures")]
        SpecificCultures = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InstalledWin32Cultures")]
        InstalledWin32Cultures = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AllCultures")]
        AllCultures = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UserCustomCulture")]
        UserCustomCulture = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReplacementCultures")]
        ReplacementCultures = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsOnlyCultures")]
        WindowsOnlyCultures = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FrameworkCultures")]
        FrameworkCultures = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeData
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributeType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type AttributeType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("constructor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ConstructorInfo Constructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("constructorArguments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeTypedArgument> ConstructorArguments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namedArguments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeNamedArgument> NamedArguments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeNamedArgument
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MemberInfo MemberInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomAttributeTypedArgument TypedValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MemberName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isField")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsField { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeTypedArgument
    {

        [System.Text.Json.Serialization.JsonPropertyName("argumentType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ArgumentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataColumn
    {

        [System.Text.Json.Serialization.JsonPropertyName("site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ISite Site { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("container")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IContainer Container { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DesignMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowDBNull")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllowDBNull { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("autoIncrement")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AutoIncrement { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("autoIncrementSeed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long AutoIncrementSeed { get; set; } = 0L;

        [System.Text.Json.Serialization.JsonPropertyName("autoIncrementStep")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long AutoIncrementStep { get; set; } = 1L;

        [System.Text.Json.Serialization.JsonPropertyName("caption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Caption { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("columnName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ColumnName { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("prefix")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Prefix { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DataType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateTimeMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DataSetDateTime DateTimeMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object DefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expression")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Expression { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("extendedProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> ExtendedProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxLength")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MaxLength { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ordinal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Ordinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReadOnly { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("table")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public DataTable Table { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unique")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Unique { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("columnMapping")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MappingType ColumnMapping { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataField
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? InjectTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DataFieldType DataType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onScenarioEventList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OnScenarioEventList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onExerciseView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OnExerciseView { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isChosenFromList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsChosenFromList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataOption> DataOptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cellMetadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CellMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("columnMetadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ColumnMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInitiallyHidden")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInitiallyHidden { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOnlyShownToOwners")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsOnlyShownToOwners { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryArticleParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string GalleryArticleParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataFieldType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Organization")]
        Organization = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Card")]
        Card = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceType")]
        SourceType = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Team")]
        Team = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TeamsMultiple")]
        TeamsMultiple = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Checkbox")]
        Checkbox = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethod")]
        DeliveryMethod = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataOption
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataFieldId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid DataFieldId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("optionName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string OptionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("optionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string OptionValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataSet
    {

        [System.Text.Json.Serialization.JsonPropertyName("container")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IContainer Container { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DesignMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remotingFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SerializationFormat RemotingFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("schemaSerializationMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SchemaSerializationMode SchemaSerializationMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("caseSensitive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CaseSensitive { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("defaultViewManager")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> DefaultViewManager { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enforceConstraints")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EnforceConstraints { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("dataSetName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataSetName { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Namespace { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("prefix")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Prefix { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("extendedProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> ExtendedProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasErrors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInitialized")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInitialized { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CultureInfo Locale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ISite Site { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Relations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tables")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Tables { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataSetDateTime
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
        Unspecified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UnspecifiedLocal")]
        UnspecifiedLocal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Utc")]
        Utc = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataTable
    {

        [System.Text.Json.Serialization.JsonPropertyName("container")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IContainer Container { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DesignMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("caseSensitive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CaseSensitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInitialized")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInitialized { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remotingFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SerializationFormat RemotingFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("childRelations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> ChildRelations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("columns")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Columns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("constraints")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Constraints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataSet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public DataSet DataSet { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> DefaultView { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayExpression")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayExpression { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("extendedProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> ExtendedProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasErrors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CultureInfo Locale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minimumCapacity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MinimumCapacity { get; set; } = 50;

        [System.Text.Json.Serialization.JsonPropertyName("parentRelations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> ParentRelations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataColumn> PrimaryKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Rows { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tableName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TableName { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prefix")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Prefix { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ISite Site { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataValue
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scenarioEventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ScenarioEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? InjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataFieldId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid DataFieldId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cellMetadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CellMetadata { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeFormatInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("amDesignator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string AmDesignator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calendar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Calendar Calendar { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DateSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstDayOfWeek")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DayOfWeek FirstDayOfWeek { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calendarWeekRule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CalendarWeekRule CalendarWeekRule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullDateTimePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullDateTimePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("longDatePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string LongDatePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("longTimePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string LongTimePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthDayPattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MonthDayPattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pmDesignator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PmDesignator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rfC1123Pattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string RfC1123Pattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortDatePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortDatePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortTimePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortTimePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sortableDateTimePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SortableDateTimePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TimeSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("universalSortableDateTimePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string UniversalSortableDateTimePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearMonthPattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string YearMonthPattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("abbreviatedDayNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> AbbreviatedDayNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortestDayNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> ShortestDayNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dayNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> DayNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("abbreviatedMonthNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> AbbreviatedMonthNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> MonthNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nativeCalendarName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NativeCalendarName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("abbreviatedMonthGenitiveNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> AbbreviatedMonthGenitiveNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("monthGenitiveNames")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> MonthGenitiveNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DayOfWeek
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sunday")]
        Sunday = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Monday")]
        Monday = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tuesday")]
        Tuesday = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Wednesday")]
        Wednesday = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Thursday")]
        Thursday = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Friday")]
        Friday = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Saturday")]
        Saturday = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DigitShapes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Context")]
        Context = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NativeNational")]
        NativeNational = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo AddMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("removeMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo RemoveMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("raiseMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo RaiseMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMulticast")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMulticast { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventHandlerType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type EventHandlerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inject")]
        Inject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Facilitation")]
        Facilitation = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FieldAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PrivateScope")]
        PrivateScope = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FamANDAssem")]
        FamANDAssem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Family")]
        Family = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamORAssem")]
        FamORAssem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FieldAccessMask")]
        FieldAccessMask = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"InitOnly")]
        InitOnly = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Literal")]
        Literal = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NotSerialized")]
        NotSerialized = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldRVA")]
        HasFieldRVA = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldMarshal")]
        HasFieldMarshal = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PinvokeImpl")]
        PinvokeImpl = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fieldType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type FieldType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInitOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInitOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLiteral")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLiteral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotSerialized")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNotSerialized { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPinvokeImpl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPinvokeImpl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fieldHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeFieldHandle FieldHandle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenericParameterAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Covariant")]
        Covariant = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Contravariant")]
        Contravariant = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VarianceMask")]
        VarianceMask = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferenceTypeConstraint")]
        ReferenceTypeConstraint = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NotNullableValueTypeConstraint")]
        NotNullableValueTypeConstraint = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DefaultConstructorConstraint")]
        DefaultConstructorConstraint = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialConstraintMask")]
        SpecialConstraintMask = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthReport
    {

        [System.Text.Json.Serialization.JsonPropertyName("entries")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, HealthReportEntry> Entries { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HealthStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDuration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TimeSpan TotalDuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthReportEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("duration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TimeSpan Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exception")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Exception Exception { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HealthStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HealthStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unhealthy")]
        Unhealthy = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Degraded")]
        Degraded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Healthy")]
        Healthy = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IComponent
    {

        [System.Text.Json.Serialization.JsonPropertyName("site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ISite Site { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IContainer
    {

        [System.Text.Json.Serialization.JsonPropertyName("components")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<object> Components { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ICustomAttributeProvider
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ISite
    {

        [System.Text.Json.Serialization.JsonPropertyName("component")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IComponent Component { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("container")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IContainer Container { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DesignMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Inject
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid InjectTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requiresInjectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? RequiresInjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requiresInject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Inject RequiresInject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataValues")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataValue> DataValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InjectType
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataField> DataFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntPtr
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deploy")]
        Deploy = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Connect")]
        Connect = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invitation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailDomain")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string EmailDomain { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ExpirationDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxUsersAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MaxUsersAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTeamLeader")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTeamLeader { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("wasDeactivated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WasDeactivated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LayoutKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sequential")]
        Sequential = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Explicit")]
        Explicit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MappingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Element")]
        Element = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Attribute")]
        Attribute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleContent")]
        SimpleContent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Hidden")]
        Hidden = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemberInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemberTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Constructor")]
        Constructor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Event")]
        Event = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Field")]
        Field = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Method")]
        Method = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TypeInfo")]
        TypeInfo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedType")]
        NestedType = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MethodAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReuseSlot")]
        ReuseSlot = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FamANDAssem")]
        FamANDAssem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Assembly")]
        Assembly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Family")]
        Family = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamORAssem")]
        FamORAssem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MemberAccessMask")]
        MemberAccessMask = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnmanagedExport")]
        UnmanagedExport = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Final")]
        Final = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Virtual")]
        Virtual = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HideBySig")]
        HideBySig = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NewSlot")]
        NewSlot = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckAccessOnOverride")]
        CheckAccessOnOverride = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Abstract")]
        Abstract = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PinvokeImpl")]
        PinvokeImpl = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"HasSecurity")]
        HasSecurity = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"RequireSecObject")]
        RequireSecObject = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodBase
    {

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeMethodHandle MethodHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MethodImplAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Native")]
        Native = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIL")]
        OPTIL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Runtime")]
        Runtime = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Unmanaged")]
        Unmanaged = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NoInlining")]
        NoInlining = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ForwardRef")]
        ForwardRef = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Synchronized")]
        Synchronized = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoOptimization")]
        NoOptimization = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PreserveSig")]
        PreserveSig = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AggressiveInlining")]
        AggressiveInlining = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AggressiveOptimization")]
        AggressiveOptimization = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalCall")]
        InternalCall = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MaxMethodImplVal")]
        MaxMethodImplVal = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MethodImplAttributes MethodImplementationFlags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CallingConventions CallingConvention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFinal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHideBySig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsStatic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVirtual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyAndAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFamilyOrAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructedGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethodDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeMethodHandle MethodHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("returnParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ParameterInfo ReturnParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("returnType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReturnType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("returnTypeCustomAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ICustomAttributeProvider ReturnTypeCustomAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Module
    {

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Assembly Assembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullyQualifiedName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MdStreamVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moduleVersionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid ModuleVersionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopeName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ScopeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moduleHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ModuleHandle ModuleHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModuleHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MdStreamVersion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Move
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MoveNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deltaSeconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeltaSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveStartTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? MoveStartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? SituationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("situationDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SituationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Msel
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MselItemStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("usePlayer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UsePlayer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerViewId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? PlayerViewId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerIntegrationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IntegrationType PlayerIntegrationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("useGallery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseGallery { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryCollectionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? GalleryCollectionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryExhibitId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? GalleryExhibitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryIntegrationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IntegrationType GalleryIntegrationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("useCite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseCite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeEvaluationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? CiteEvaluationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeScoringModelId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? CiteScoringModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeIntegrationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IntegrationType CiteIntegrationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("useSteamfitter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseSteamfitter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("steamfitterScenarioId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? SteamfitterScenarioId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("steamfitterIntegrationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IntegrationType SteamfitterIntegrationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset StartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("durationSeconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DurationSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showTimeOnScenarioEventList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowTimeOnScenarioEventList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showTimeOnExerciseView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowTimeOnExerciseView { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showMoveOnScenarioEventList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowMoveOnScenarioEventList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showMoveOnExerciseView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowMoveOnExerciseView { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showGroupOnScenarioEventList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowGroupOnScenarioEventList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showGroupOnExerciseView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowGroupOnExerciseView { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moves")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Move> Moves { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataField> DataFields { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scenarioEvents")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ScenarioEvent> ScenarioEvents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teams")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMselRoles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<UserMselRole> UserMselRoles { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("headerRowMetadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string HeaderRowMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organizations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Organization> Organizations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cards")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Card> Cards { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryArticleParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> GalleryArticleParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gallerySourceTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> GallerySourceTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeRoles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CiteRole> CiteRoles { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeActions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CiteAction> CiteActions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerApplications")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PlayerApplication> PlayerApplications { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<MselPage> Pages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Invitation> Invitations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MselItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Entered")]
        Entered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Deployed")]
        Deployed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MselPage
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("content")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Content { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allCanView")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllCanView { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MselRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Editor")]
        Editor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Approver")]
        Approver = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MoveEditor")]
        MoveEditor = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Viewer")]
        Viewer = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Evaluator")]
        Evaluator = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MselUnit
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UnitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Unit Unit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumberFormatInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("currencyDecimalDigits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyDecimalDigits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyDecimalSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencyDecimalSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyGroupSizes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int> CurrencyGroupSizes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberGroupSizes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int> NumberGroupSizes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentGroupSizes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int> PercentGroupSizes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyGroupSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencyGroupSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencySymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencySymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naNSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NaNSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyNegativePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyNegativePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberNegativePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int NumberNegativePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentPositivePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentPositivePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentNegativePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentNegativePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("negativeInfinitySymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NegativeInfinitySymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("negativeSign")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NegativeSign { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberDecimalDigits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int NumberDecimalDigits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberDecimalSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NumberDecimalSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberGroupSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NumberGroupSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyPositivePattern")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyPositivePattern { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positiveInfinitySymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PositiveInfinitySymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positiveSign")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PositiveSign { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentDecimalDigits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentDecimalDigits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentDecimalSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentDecimalSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentGroupSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentGroupSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("percentSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("perMilleSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PerMilleSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nativeDigits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> NativeDigits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("digitSubstitution")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DigitShapes DigitSubstitution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Organization
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("summary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Summary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTemplate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"In")]
        In = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Out")]
        Out = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Lcid")]
        Lcid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Retval")]
        Retval = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Optional")]
        Optional = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HasFieldMarshal")]
        HasFieldMarshal = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved3")]
        Reserved3 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved4")]
        Reserved4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParameterAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("member")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MemberInfo Member { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parameterType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ParameterType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("position")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Position { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLcid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLcid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOptional")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsOptional { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOut")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRetval")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsRetval { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object DefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rawDefaultValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object RawDefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasDefaultValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasDefaultValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permission
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReadOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerApplication
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Msel Msel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Icon { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("embeddable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Embeddable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loadInBackground")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LoadInBackground { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerApplicationTeam
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerApplicationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid PlayerApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid TeamId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertyAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HasDefault")]
        HasDefault = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved2")]
        Reserved2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved3")]
        Reserved3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved4")]
        Reserved4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PropertyInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type PropertyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canRead")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanRead { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWrite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanWrite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("getMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo GetMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("setMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodInfo SetMethod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeFieldHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IntPtr Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeMethodHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IntPtr Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuntimeTypeHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IntPtr Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScenarioEvent
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataValues")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DataValue> DataValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isHidden")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHidden { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rowMetadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string RowMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deltaSeconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeltaSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scenarioEventType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventType ScenarioEventType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("injectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? InjectId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SchemaSerializationMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeSchema")]
        IncludeSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeSchema")]
        ExcludeSchema = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculationEquation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CalculationEquation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isModifierRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsModifierRequired { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ScoringWeight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumberFirstDisplay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MoveNumberFirstDisplay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moveNumberLastDisplay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MoveNumberLastDisplay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringModelId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid ScoringModelId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ScoringOption> ScoringOptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringOptionSelection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScoringOptionSelection ScoringOptionSelection { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculationEquation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CalculationEquation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ItemStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringCategories")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ScoringCategory> ScoringCategories { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideScoresOnScoreSheet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HideScoresOnScoreSheet { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayCommentTextBoxes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DisplayCommentTextBoxes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayScoringModelByMoveNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DisplayScoringModelByMoveNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoringOption
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isModifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsModifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scoringCategoryId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid ScoringCategoryId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScoringOptionSelection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Multiple")]
        Multiple = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityRuleSet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Level1")]
        Level1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Level2")]
        Level2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SerializationFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SortVersion
    {

        [System.Text.Json.Serialization.JsonPropertyName("fullVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int FullVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sortId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid SortId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructLayoutAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object TypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LayoutKind Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Team
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeTeamTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? CiteTeamTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerTeamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? PlayerTeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("galleryTeamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? GalleryTeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citeTeamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? CiteTeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTeamLeaderInvite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanTeamLeaderInvite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTeamMemberInvite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanTeamMemberInvite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("users")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<User> Users { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cardTeams")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CardTeam> CardTeams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("playerApplicationTeams")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PlayerApplicationTeam> PlayerApplicationTeams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Invitation> Invitations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userTeamRoles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<UserTeamRole> UserTeamRoles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TeamRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Observer")]
        Observer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inviter")]
        Inviter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Incrementer")]
        Incrementer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Modifier")]
        Modifier = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Submitter")]
        Submitter = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamType
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showTeamTypeAverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShowTeamTypeAverage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOfficialScoreContributor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsOfficialScoreContributor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid TeamId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TextInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("ansiCodePage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int AnsiCodePage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oemCodePage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int OemCodePage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("macCodePage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MacCodePage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ebcdicCodePage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int EbcdicCodePage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lcid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cultureName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CultureName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listSeparator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ListSeparator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRightToLeft")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsRightToLeft { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSpan
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticks")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Ticks { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("days")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Days { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hours")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Hours { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("milliseconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Milliseconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minutes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Minutes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Seconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDays")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalHours")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalHours { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMilliseconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalMilliseconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMinutes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalMinutes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalSeconds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInterface { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Assembly Assembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNested")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNested { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodBase DeclaringMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type UnderlyingSystemType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructedGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericTypeParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethodParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSZArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVariableBoundArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsByRefLike { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasElementType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int GenericParameterPosition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenericParameterAttributes GenericParameterAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TypeAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isImport")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsImport { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSealed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamANDAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamORAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNotPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAutoLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsExplicitLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLayoutSequential { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAnsiClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAutoClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsUnicodeClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCOMObject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsContextful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMarshalByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrimitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsValueType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSignatureType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public StructLayoutAttribute StructLayoutAttribute { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ConstructorInfo TypeInitializer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeTypeHandle TypeHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("guid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Guid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type BaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSerializable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVisible { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TypeAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotPublic")]
        NotPublic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Public")]
        Public = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedPublic")]
        NestedPublic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedPrivate")]
        NestedPrivate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamily")]
        NestedFamily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedAssembly")]
        NestedAssembly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamANDAssem")]
        NestedFamANDAssem = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NestedFamORAssem")]
        NestedFamORAssem = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SequentialLayout")]
        SequentialLayout = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ExplicitLayout")]
        ExplicitLayout = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LayoutMask")]
        LayoutMask = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Interface")]
        Interface = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Abstract")]
        Abstract = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Sealed")]
        Sealed = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialName")]
        SpecialName = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RTSpecialName")]
        RTSpecialName = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Import")]
        Import = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Serializable")]
        Serializable = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsRuntime")]
        WindowsRuntime = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UnicodeClass")]
        UnicodeClass = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoClass")]
        AutoClass = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomFormatClass")]
        CustomFormatClass = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HasSecurity")]
        HasSecurity = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservedMask")]
        ReservedMask = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BeforeFieldInit")]
        BeforeFieldInit = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomFormatMask")]
        CustomFormatMask = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypeInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCollectible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int MetadataToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInterface { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemberTypes MemberType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyQualifiedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Assembly Assembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("module")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Module Module { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNested")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNested { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type DeclaringType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodBase DeclaringMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type ReflectedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type UnderlyingSystemType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPointer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsConstructedGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericTypeParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericMethodParameter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsGenericTypeDefinition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSZArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVariableBoundArray { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsByRefLike { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasElementType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int GenericParameterPosition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenericParameterAttributes GenericParameterAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TypeAttributes Attributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isImport")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsImport { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSealed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSpecialName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedAssembly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamANDAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedFamORAssem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedPrivate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNestedPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNotPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAutoLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsExplicitLayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLayoutSequential { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAnsiClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsAutoClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsUnicodeClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCOMObject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsContextful { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMarshalByRef { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrimitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsValueType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSignatureType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecuritySafeCritical { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSecurityTransparent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public StructLayoutAttribute StructLayoutAttribute { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ConstructorInfo TypeInitializer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public RuntimeTypeHandle TypeHandle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("guid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Guid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Type BaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsSerializable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContainsGenericParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsVisible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genericTypeParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Type> GenericTypeParameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredConstructors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ConstructorInfo> DeclaredConstructors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredEvents")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<EventInfo> DeclaredEvents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<FieldInfo> DeclaredFields { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredMembers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<MemberInfo> DeclaredMembers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredMethods")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<MethodInfo> DeclaredMethods { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredNestedTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<TypeInfo> DeclaredNestedTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("declaredProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PropertyInfo> DeclaredProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("implementedInterfaces")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Type> ImplementedInterfaces { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Unit
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("users")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<User> Users { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("user")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public User User { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UnitId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Unit Unit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMselRole
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mselId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid MselId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MselRole Role { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserPermission
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid PermissionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserTeamRole
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? ModifiedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("teamId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid TeamId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TeamRole Role { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    // TODO(system.text.json): What to do here?
    public partial class Exception
    {

        [System.Text.Json.Serialization.JsonPropertyName("targetSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MethodBase TargetSite { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("innerException")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Exception InnerException { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("helpLink")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string HelpLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hResult")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int HResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stackTrace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string StackTrace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604