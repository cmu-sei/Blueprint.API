{
  "openapi": "3.0.1",
  "info": {
    "title": "Blueprint API",
    "version": "v1"
  },
  "paths": {
    "/api/cards/templates": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Gets Card Templates",
        "description": "Returns a list of Card Templates",
        "operationId": "getCardTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/cards": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Gets Cards by msel",
        "description": "Returns a list of Cards for the msel.",
        "operationId": "getCardsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards/{id}": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Gets a specific Card by id",
        "description": "Returns the Card with the id specified",
        "operationId": "getCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Card",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Card"
        ],
        "summary": "Updates a  Card",
        "description": "Updates a Card with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the card parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Card to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Card values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Card"
        ],
        "summary": "Deletes a  Card",
        "description": "Deletes a  Card with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Card to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Creates a new Card",
        "description": "Creates a new Card with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createCard",
        "requestBody": {
          "description": "The data used to create the Card",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamcards": {
      "get": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Gets all CardTeams in the system",
        "description": "Returns a list of all of the CardTeams in the system.\r\n<para />",
        "operationId": "getCardTeams",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Creates a new CardTeam",
        "description": "Creates a new CardTeam with the attributes specified\r\n<para />",
        "operationId": "createCardTeam",
        "requestBody": {
          "description": "The data to create the CardTeam with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/teamcards": {
      "get": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Gets all CardTeams for a MSEL",
        "description": "Returns a list of all of the CardTeams for the msel.",
        "operationId": "getMselCardTeams",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards/{cardId}/teamcards": {
      "get": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Gets all CardTeams for a card",
        "description": "Returns a list of all of the CardTeams for the card.",
        "operationId": "getCardCardTeams",
        "parameters": [
          {
            "name": "cardId",
            "in": "path",
            "description": "The id of the CardTeam",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamcards/{id}": {
      "get": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Gets a specific CardTeam by id",
        "description": "Returns the CardTeam with the id specified\r\n<para />",
        "operationId": "getCardTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CardTeam",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Deletes a CardTeam",
        "description": "Deletes a CardTeam with the specified id\r\n<para />",
        "operationId": "deleteCardTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CardTeam to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cardteams/{id}": {
      "put": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Updates a  CardTeam",
        "description": "Updates a CardTeam with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the cardTeam parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateCardTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the CardTeam to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated CardTeam values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}/cards/{cardId}": {
      "delete": {
        "tags": [
          "CardTeam"
        ],
        "summary": "Deletes a CardTeam by card ID and team ID",
        "description": "Deletes a CardTeam with the specified card ID and team ID\r\n<para />",
        "operationId": "deleteCardTeamByIds",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of a team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "ID of a card.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Gets Catalogs",
        "description": "Returns a list of Catalogs.",
        "operationId": "getCatalogs",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Creates a new Catalog",
        "description": "Creates a new Catalog with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createCatalog",
        "requestBody": {
          "description": "The data used to create the Catalog",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-catalogs": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Gets Catalogs for the current user",
        "description": "Returns a list of the current user's active Catalogs.",
        "operationId": "getMyCatalogs",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/catalogs": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Gets Catalogs for requested user",
        "description": "Returns a list of the requested user's active Catalogs.",
        "operationId": "getUserCatalogs",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Gets a specific Catalog by id",
        "description": "Returns the Catalog with the id specified",
        "operationId": "getCatalog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Catalog",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Updates a Catalog",
        "description": "Updates a Catalog with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the catalog parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateCatalog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Catalog to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Catalog values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Catalog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Deletes a Catalog",
        "description": "Deletes a Catalog with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteCatalog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Catalog to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{id}/copy": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Creates a new Catalog by copying an existing Catalog",
        "description": "Creates a new Catalog from the specified existing Catalog\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "copyCatalog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Catalog to be copied",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/json": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Upload a json Catalog file",
        "operationId": "uploadJsonCatalog",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "MselId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "MselTemplateId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "TeamId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ToUpload": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "MselId": {
                  "style": "form"
                },
                "MselTemplateId": {
                  "style": "form"
                },
                "TeamId": {
                  "style": "form"
                },
                "ToUpload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{id}/json": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Download a catalog by id as json file",
        "operationId": "downloadJsonCatalog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the catalog",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cataloginjects/{id}": {
      "get": {
        "tags": [
          "CatalogInject"
        ],
        "summary": "Gets a specific CatalogInject by id",
        "description": "Returns the CatalogInject with the id specified\r\n<para />\r\nOnly accessible to a SuperCatalog",
        "operationId": "getCatalogInject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CatalogInject",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CatalogInject"
        ],
        "summary": "Deletes a CatalogInject",
        "description": "Deletes a CatalogInject with the specified id\r\n<para />\r\nAccessible only to a SuperCatalog",
        "operationId": "deleteCatalogInject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CatalogInject to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/cataloginjects": {
      "post": {
        "tags": [
          "CatalogInject"
        ],
        "summary": "Creates a new CatalogInject",
        "description": "Creates a new CatalogInject with the attributes specified\r\n<para />\r\nAccessible only to a SuperCatalog",
        "operationId": "createCatalogInject",
        "requestBody": {
          "description": "The data to create the CatalogInject with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogInject"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogInject"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogInject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogInject"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{catalogId}/injects/{injectId}": {
      "delete": {
        "tags": [
          "CatalogInject"
        ],
        "summary": "Deletes a CatalogInject by catalog ID and inject ID",
        "description": "Deletes a CatalogInject with the specified catalog ID and inject ID\r\n<para />\r\nAccessible only to a SuperCatalog",
        "operationId": "deleteCatalogInjectByIds",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of a catalog.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "injectId",
            "in": "path",
            "description": "ID of a inject.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{catalogId}/catalogunits": {
      "get": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Gets all CatalogUnits for a Catalog",
        "description": "Returns a list of all of the CatalogUnits for the catalog.",
        "operationId": "getCatalogUnits",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "The id of the Catalog",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogUnit"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogUnit"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogUnit"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogunits/{id}": {
      "get": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Gets a specific CatalogUnit by id",
        "description": "Returns the CatalogUnit with the id specified\r\n<para />",
        "operationId": "getCatalogUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CatalogUnit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Updates a CatalogUnit",
        "description": "Updates a CatalogUnit with the attributes specified\r\n<para />",
        "operationId": "updateCatalogUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the CatalogUnit to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated CatalogUnit values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Deletes a CatalogUnit",
        "description": "Deletes a CatalogUnit with the specified id\r\n<para />",
        "operationId": "deleteCatalogUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CatalogUnit to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogunits": {
      "post": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Creates a new CatalogUnit",
        "description": "Creates a new CatalogUnit with the attributes specified\r\n<para />",
        "operationId": "createCatalogUnit",
        "requestBody": {
          "description": "The data to create the CatalogUnit with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUnit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogUnit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{catalogId}/units/{unitId}": {
      "delete": {
        "tags": [
          "CatalogUnit"
        ],
        "summary": "Deletes a CatalogUnit by catalog ID and unit ID",
        "description": "Deletes a CatalogUnit with the specified catalog ID and unit ID\r\n<para />",
        "operationId": "deleteCatalogUnitByIds",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of a catalog.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "description": "ID of a unit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/scoringmodels": {
      "get": {
        "tags": [
          "Cite"
        ],
        "summary": "Gets all ScoringModels",
        "description": "Returns a list of all of the ScoringModels.",
        "operationId": "getScoringModels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScoringModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScoringModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScoringModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamtypes": {
      "get": {
        "tags": [
          "Cite"
        ],
        "summary": "Gets all TeamTypes",
        "description": "Returns a list of all of the TeamTypes.",
        "operationId": "getTeamTypes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamType"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeactions/templates": {
      "get": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Gets CiteAction Templates",
        "description": "Returns a list of CiteAction Templates",
        "operationId": "getCiteActionTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/citeactions": {
      "get": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Gets CiteActions by msel",
        "description": "Returns a list of CiteActions for the msel.",
        "operationId": "getActionsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteAction"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeactions/{id}": {
      "get": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Gets a specific CiteAction by id",
        "description": "Returns the CiteAction with the id specified",
        "operationId": "getCiteAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CiteAction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Updates a  CiteAction",
        "description": "Updates a CiteAction with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the citeAction parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateCiteAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the CiteAction to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated CiteAction values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Deletes a  CiteAction",
        "description": "Deletes a  CiteAction with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteCiteAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CiteAction to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeactions": {
      "post": {
        "tags": [
          "CiteAction"
        ],
        "summary": "Creates a new CiteAction",
        "description": "Creates a new CiteAction with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createCiteAction",
        "requestBody": {
          "description": "The data used to create the CiteAction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteAction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteAction"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeroles/templates": {
      "get": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Gets CiteRole Templates",
        "description": "Returns a list of CiteRole Templates",
        "operationId": "getCiteRoleTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/citeroles": {
      "get": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Gets CiteRoles by msel",
        "description": "Returns a list of CiteRoles for the msel.",
        "operationId": "getRolesByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CiteRole"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeroles/{id}": {
      "get": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Gets a specific CiteRole by id",
        "description": "Returns the CiteRole with the id specified",
        "operationId": "getCiteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CiteRole",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Updates a  CiteRole",
        "description": "Updates a CiteRole with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the citeRole parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateCiteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the CiteRole to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated CiteRole values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Deletes a  CiteRole",
        "description": "Deletes a  CiteRole with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteCiteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the CiteRole to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/citeroles": {
      "post": {
        "tags": [
          "CiteRole"
        ],
        "summary": "Creates a new CiteRole",
        "description": "Creates a new CiteRole with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createCiteRole",
        "requestBody": {
          "description": "The data used to create the CiteRole",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiteRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datafields/templates": {
      "get": {
        "tags": [
          "DataField"
        ],
        "summary": "Gets DataField Templates",
        "description": "Returns a list of DataField Templates",
        "operationId": "getDataFieldTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/datafields": {
      "get": {
        "tags": [
          "DataField"
        ],
        "summary": "Gets DataFields by msel",
        "description": "Returns a list of DataFields for the msel.",
        "operationId": "getDataFieldsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataField"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datafields/{id}": {
      "get": {
        "tags": [
          "DataField"
        ],
        "summary": "Gets a specific DataField by id",
        "description": "Returns the DataField with the id specified",
        "operationId": "getDataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataField",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataField"
        ],
        "summary": "Updates a  DataField",
        "description": "Updates a DataField with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the dataField parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateDataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DataField to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated DataField values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataField"
        ],
        "summary": "Deletes a  DataField",
        "description": "Deletes a  DataField with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteDataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataField to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datafields": {
      "post": {
        "tags": [
          "DataField"
        ],
        "summary": "Creates a new DataField",
        "description": "Creates a new DataField with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createDataField",
        "requestBody": {
          "description": "The data used to create the DataField",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataField"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataField"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/dataoptions": {
      "get": {
        "tags": [
          "DataOption"
        ],
        "summary": "Gets DataOptions by msel",
        "description": "Returns a list of DataOptions for the msel.",
        "operationId": "getDataOptionsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datafields/{dataFieldId}/dataoptions": {
      "get": {
        "tags": [
          "DataOption"
        ],
        "summary": "Gets DataOptions by DataField",
        "description": "Returns a list of DataOptions for the DataField.",
        "operationId": "getByDataField",
        "parameters": [
          {
            "name": "dataFieldId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataOption"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataoptions/{id}": {
      "get": {
        "tags": [
          "DataOption"
        ],
        "summary": "Gets a specific DataOption by id",
        "description": "Returns the DataOption with the id specified",
        "operationId": "getDataOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataOption",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataOption"
        ],
        "summary": "Updates a  DataOption",
        "description": "Updates a DataOption with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the dataOption parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateDataOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DataOption to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated DataOption values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataOption"
        ],
        "summary": "Deletes a  DataOption",
        "description": "Deletes a  DataOption with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteDataOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataOption to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataoptions": {
      "post": {
        "tags": [
          "DataOption"
        ],
        "summary": "Creates a new DataOption",
        "description": "Creates a new DataOption with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createDataOption",
        "requestBody": {
          "description": "The data used to create the DataOption",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataOption"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOption"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/datavalues": {
      "get": {
        "tags": [
          "DataValue"
        ],
        "summary": "Gets DataValues by msel",
        "description": "Returns a list of DataValues for the msel.",
        "operationId": "getDataValuesByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValue"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datavalues/{id}": {
      "get": {
        "tags": [
          "DataValue"
        ],
        "summary": "Gets a specific DataValue by id",
        "description": "Returns the DataValue with the id specified",
        "operationId": "getDataValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataValue",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataValue"
        ],
        "summary": "Updates a  DataValue",
        "description": "Updates a DataValue with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the dataValue parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateDataValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DataValue to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated DataValue values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataValue"
        ],
        "summary": "Deletes a  DataValue",
        "description": "Deletes a  DataValue with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteDataValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the DataValue to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/datavalues": {
      "post": {
        "tags": [
          "DataValue"
        ],
        "summary": "Creates a new DataValue",
        "description": "Creates a new DataValue with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createDataValue",
        "requestBody": {
          "description": "The data used to create the DataValue",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataValue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValue"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/health/live": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Checks the liveliness health endpoint",
        "description": "Returns a HealthReport of the liveliness health check",
        "operationId": "getLiveliness",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/health/ready": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Checks the readiness health endpoint",
        "description": "Returns a HealthReport of the readiness health check",
        "operationId": "getReadiness",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthReport"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Returns the current version of the API",
        "description": "Returns the version.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/{catalogId}/injects": {
      "get": {
        "tags": [
          "Inject"
        ],
        "summary": "Gets Injects for a Catalog",
        "description": "Returns a list of Injects for the Catalog.",
        "operationId": "getInjectsByCatalog",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "The ID of the Catalog",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Injectm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Injectm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Injectm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/injects/{id}": {
      "get": {
        "tags": [
          "Inject"
        ],
        "summary": "Gets a specific Inject by id",
        "description": "Returns the Inject with the id specified\r\n<para />\r\nAccessible to a User that is a member of a Team within the specified Inject",
        "operationId": "getInject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Inject",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Inject"
        ],
        "summary": "Updates an Inject",
        "description": "Updates an Inject with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Inject",
        "operationId": "updateInject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Inject to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Inject values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Inject"
        ],
        "summary": "Deletes an Inject",
        "description": "Deletes an Inject with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Inject",
        "operationId": "deleteInject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Inject to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/{catalogId}/injects": {
      "post": {
        "tags": [
          "Inject"
        ],
        "operationId": "createInject",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Injectm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Injectm"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/injecttypes": {
      "get": {
        "tags": [
          "InjectType"
        ],
        "summary": "Gets all InjectType in the system",
        "description": "Returns a list of all of the InjectTypes in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getInjectTypes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InjectType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InjectType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InjectType"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "InjectType"
        ],
        "summary": "Creates a new InjectType",
        "description": "Creates a new InjectType with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or an Administrator",
        "operationId": "createInjectType",
        "requestBody": {
          "description": "The data to create the InjectType with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/injecttypes/{id}": {
      "get": {
        "tags": [
          "InjectType"
        ],
        "summary": "Gets a specific InjectType by id",
        "description": "Returns the InjectType with the id specified\r\n<para />\r\nAccessible to a SuperUser or a User that is a member of a Team within the specified InjectType",
        "operationId": "getInjectType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the InjectType",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InjectType"
        ],
        "summary": "Updates a InjectType",
        "description": "Updates a InjectType with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified InjectType",
        "operationId": "updateInjectType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Exericse to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated InjectType values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InjectType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InjectType"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InjectType"
        ],
        "summary": "Deletes a InjectType",
        "description": "Deletes a InjectType with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified InjectType",
        "operationId": "deleteInjectType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the InjectType to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/invitations": {
      "get": {
        "tags": [
          "Invitation"
        ],
        "summary": "Gets all Invitations for a MSEL",
        "description": "Returns a list of all of the Invitations for the msel.",
        "operationId": "getInvitations",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitations/{id}": {
      "get": {
        "tags": [
          "Invitation"
        ],
        "summary": "Gets a specific Invitation by id",
        "description": "Returns the Invitation with the id specified\r\n<para />",
        "operationId": "getInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Invitation",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Invitation"
        ],
        "summary": "Updates a Invitation",
        "description": "Updates a Invitation with the attributes specified\r\n<para />",
        "operationId": "updateInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Invitation to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Invitation values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invitation"
        ],
        "summary": "Deletes a Invitation",
        "description": "Deletes a Invitation with the specified id\r\n<para />",
        "operationId": "deleteInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Invitation to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitations": {
      "post": {
        "tags": [
          "Invitation"
        ],
        "summary": "Creates a new Invitation",
        "description": "Creates a new Invitation with the attributes specified\r\n<para />",
        "operationId": "createInvitation",
        "requestBody": {
          "description": "The data to create the Invitation with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/moves": {
      "get": {
        "tags": [
          "Move"
        ],
        "summary": "Gets Moves by msel",
        "description": "Returns a list of Moves for the msel.",
        "operationId": "getMovesByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Move"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Move"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Move"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/moves/{id}": {
      "get": {
        "tags": [
          "Move"
        ],
        "summary": "Gets a specific Move by id",
        "description": "Returns the Move with the id specified",
        "operationId": "getMove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Move",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Move"
        ],
        "summary": "Updates a  Move",
        "description": "Updates a Move with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the move parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateMove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Move to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Move values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Move"
        ],
        "summary": "Deletes a  Move",
        "description": "Deletes a  Move with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteMove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Move to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/moves": {
      "post": {
        "tags": [
          "Move"
        ],
        "summary": "Creates a new Move",
        "description": "Creates a new Move with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createMove",
        "requestBody": {
          "description": "The data used to create the Move",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Move"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Move"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets Msels",
        "description": "Returns a list of Msels.",
        "operationId": "getMsels",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Whether or not to return records only for a designated user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TeamId",
            "in": "query",
            "description": "Whether or not to return records only for a designated team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "description": "Whether or not to return records only for descriptions containing the designated string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Creates a new Msel",
        "description": "Creates a new Msel with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createMsel",
        "requestBody": {
          "description": "The data used to create the Msel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-msels": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets Msels for the current user",
        "description": "Returns a list of the current user's active Msels.",
        "operationId": "getMyMsels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-join-msels": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets Msels the current user can join",
        "description": "Returns a list of the current user's Msels to join.",
        "operationId": "getMyJoinMsels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-launch-msels": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets Msels the current user can launch",
        "description": "Returns a list of the current user's Msels to launch.",
        "operationId": "getMyLaunchMsels",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/msels": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets Msels for requested user",
        "description": "Returns a list of the requested user's active Msels.",
        "operationId": "getUserMsels",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Msel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets a specific Msel by id",
        "description": "Returns the Msel with the id specified",
        "operationId": "getMsel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Msel"
        ],
        "summary": "Updates a Msel",
        "description": "Updates a Msel with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the msel parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateMsel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Msel to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Msel values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Msel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Msel"
        ],
        "summary": "Deletes a Msel",
        "description": "Deletes a Msel with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteMsel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Msel to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/data": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Gets specific Msel data by id",
        "description": "Returns a DataTable for the Msel with the id specified",
        "operationId": "getMselData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataTable"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTable"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTable"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/copy": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Creates a new MSEL by copying an existing MSEL",
        "description": "Creates a new MSEL from the specified existing MSEL\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "copyMsel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the MSEL to be copied",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/user/{userId}/role/{mselRole}/add": {
      "put": {
        "tags": [
          "Msel"
        ],
        "summary": "Adds a User Role to a Msel",
        "description": "Adds the User Role specified to the MSEL specified\r\n<para />\r\nAccessible only to a ContentDeveloper or a MSEL owner",
        "operationId": "AddUserMselRole",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mselId",
            "in": "path",
            "description": "The ID of the Msel to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mselRole",
            "in": "path",
            "description": "The MSEL Role to add",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MselRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/user/{userId}/role/{mselRole}/remove": {
      "put": {
        "tags": [
          "Msel"
        ],
        "summary": "Removes a User Role from a Msel",
        "description": "Removes the User Role specified from the MSEL specified\r\n<para />\r\nAccessible only to a ContentDeveloper or a MSEL owner",
        "operationId": "RemoveUserMselRole",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mselId",
            "in": "path",
            "description": "The ID of the Msel to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mselRole",
            "in": "path",
            "description": "The MSEL Role to add",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MselRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/xlsx": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Upload file",
        "description": "File objects will be returned in the same order as their respective files within the form.",
        "operationId": "uploadXlsx",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "MselId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "MselTemplateId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "TeamId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ToUpload": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "MselId": {
                  "style": "form"
                },
                "MselTemplateId": {
                  "style": "form"
                },
                "TeamId": {
                  "style": "form"
                },
                "ToUpload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/xlsx": {
      "put": {
        "tags": [
          "Msel"
        ],
        "summary": "Replace a msel by id with data in xlsx file",
        "operationId": "replaceWithXlsxFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "MselId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "MselTemplateId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "TeamId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ToUpload": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "MselId": {
                  "style": "form"
                },
                "MselTemplateId": {
                  "style": "form"
                },
                "TeamId": {
                  "style": "form"
                },
                "ToUpload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Download a msel by id as xlsx file",
        "operationId": "downloadXlsx",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/json": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Upload a json MSEL file",
        "operationId": "uploadJsonMsel",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "MselId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "MselTemplateId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "TeamId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ToUpload": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "MselId": {
                  "style": "form"
                },
                "MselTemplateId": {
                  "style": "form"
                },
                "TeamId": {
                  "style": "form"
                },
                "ToUpload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/json": {
      "get": {
        "tags": [
          "Msel"
        ],
        "summary": "Download a msel by id as json file",
        "operationId": "downloadJsonMsel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/integrations": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Push Integrations",
        "description": "Pushes all MSEL Integrations to the associated applications\r\n<para />\r\nAccessible only to a ContentDeveloper or MSEL owner",
        "operationId": "pushIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Msel"
        ],
        "summary": "Pull Integrations",
        "description": "Pulls all Integrations from the associated applications\r\n<para />\r\nAccessible only to a ContentDeveloper or Msel Owner",
        "operationId": "pullIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MSEL",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{id}/archive": {
      "delete": {
        "tags": [
          "Msel"
        ],
        "summary": "End the MSEL deployment and archive it",
        "description": "Pulls all Integrations from the associated applications and changes MSEL staus to Archived\r\n<para />\r\nAccessible only to a ContentDeveloper or MSEL Owner",
        "operationId": "archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MSEL",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/join": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Join a MSEL by invitation",
        "description": "Joins the user to the msel based on a valid invitation\r\n<para />",
        "operationId": "joinMselByInvitation",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/launch": {
      "post": {
        "tags": [
          "Msel"
        ],
        "summary": "Launch a MSEL by invitation",
        "description": "Launches the msel and joins the user to the team indicated by a valid invitation\r\n<para />\r\nReturns the Player View ID that is being created",
        "operationId": "launchMselByInvitation",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Msel"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/mselpages": {
      "get": {
        "tags": [
          "MselPage"
        ],
        "summary": "Gets all MselPages for a MSEL",
        "description": "Returns a list of all of the MselPages for the msel.",
        "operationId": "getMselPages",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselPage"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselPage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselPage"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/mselpages/{id}": {
      "get": {
        "tags": [
          "MselPage"
        ],
        "summary": "Gets a specific MselPage by id",
        "description": "Returns the MselPage with the id specified\r\n<para />",
        "operationId": "getMselPage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MselPage",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MselPage"
        ],
        "summary": "Updates a MselPage",
        "description": "Updates a MselPage with the attributes specified\r\n<para />",
        "operationId": "updateMselPage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the MselPage to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated MselPage values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MselPage"
        ],
        "summary": "Deletes a MselPage",
        "description": "Deletes a MselPage with the specified id\r\n<para />",
        "operationId": "deleteMselPage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MselPage to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/mselpages": {
      "post": {
        "tags": [
          "MselPage"
        ],
        "summary": "Creates a new MselPage",
        "description": "Creates a new MselPage with the attributes specified\r\n<para />",
        "operationId": "createMselPage",
        "requestBody": {
          "description": "The data to create the MselPage with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MselPage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselPage"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/mselunits": {
      "get": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Gets all MselUnits for a MSEL",
        "description": "Returns a list of all of the MselUnits for the msel.",
        "operationId": "getMselUnits",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselUnit"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselUnit"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MselUnit"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/mselunits/{id}": {
      "get": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Gets a specific MselUnit by id",
        "description": "Returns the MselUnit with the id specified\r\n<para />",
        "operationId": "getMselUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MselUnit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Updates a MselUnit",
        "description": "Updates a MselUnit with the attributes specified\r\n<para />",
        "operationId": "updateMselUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the MselUnit to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated MselUnit values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Deletes a MselUnit",
        "description": "Deletes a MselUnit with the specified id\r\n<para />",
        "operationId": "deleteMselUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the MselUnit to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/mselunits": {
      "post": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Creates a new MselUnit",
        "description": "Creates a new MselUnit with the attributes specified\r\n<para />",
        "operationId": "createMselUnit",
        "requestBody": {
          "description": "The data to create the MselUnit with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MselUnit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MselUnit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/units/{unitId}": {
      "delete": {
        "tags": [
          "MselUnit"
        ],
        "summary": "Deletes a MselUnit by msel ID and unit ID",
        "description": "Deletes a MselUnit with the specified msel ID and unit ID\r\n<para />",
        "operationId": "deleteMselUnitByIds",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "ID of a msel.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "description": "ID of a unit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/templates": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gets Organization Templates",
        "description": "Returns a list of Organization Templates",
        "operationId": "getOrganizationTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gets Organizations by msel",
        "description": "Returns a list of Organizations for the msel.",
        "operationId": "getOrganizationsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gets a specific Organization by id",
        "description": "Returns the Organization with the id specified",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a  Organization",
        "description": "Updates a Organization with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the organization parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Organization to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Organization values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes a  Organization",
        "description": "Deletes a  Organization with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Organization to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Creates a new Organization",
        "description": "Creates a new Organization with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "The data used to create the Organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Gets all Permission in the system",
        "description": "Returns a list of all of the Permissions in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getPermissions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Creates a new Permission",
        "description": "Creates a new Permission with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or an Administrator",
        "operationId": "createPermission",
        "requestBody": {
          "description": "The data to create the Permission with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-permissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Gets Permissions for the current user",
        "description": "Returns a list of the current user's Permissions.",
        "operationId": "getMyPermissions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/permissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Gets Permissions for the specified user",
        "description": "Returns a list of the specified user's Permissions.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getPermissionsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Gets a specific Permission by id",
        "description": "Returns the Permission with the id specified\r\n<para />\r\nAccessible to a SuperUser or a User that is a member of a Team within the specified Permission",
        "operationId": "getPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Permission",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Permission"
        ],
        "summary": "Updates a Permission",
        "description": "Updates a Permission with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Permission",
        "operationId": "updatePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Exericse to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Permission values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Deletes a Permission",
        "description": "Deletes a Permission with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Permission",
        "operationId": "deletePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Permission to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/applicationtemplates": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Gets all ApplicationTemplates",
        "description": "Returns a list of all of the ApplicationTemplates.",
        "operationId": "getApplicationTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTemplate"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTemplate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTemplate"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/playerapplications": {
      "get": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Gets PlayerApplications by msel",
        "description": "Returns a list of PlayerApplications for the msel.",
        "operationId": "getApplicationsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplication"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplication"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplication"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/playerapplications/{id}": {
      "get": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Gets a specific PlayerApplication by id",
        "description": "Returns the PlayerApplication with the id specified",
        "operationId": "getPlayerApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the PlayerApplication",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Updates a  PlayerApplication",
        "description": "Updates a PlayerApplication with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the playerApplication parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updatePlayerApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PlayerApplication to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated PlayerApplication values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Deletes a  PlayerApplication",
        "description": "Deletes a  PlayerApplication with the specified id\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "deletePlayerApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the PlayerApplication to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/playerapplications": {
      "post": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Creates a new PlayerApplication",
        "description": "Creates a new PlayerApplication with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "createPlayerApplication",
        "requestBody": {
          "description": "The data used to create the PlayerApplication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/playerapplications/push": {
      "post": {
        "tags": [
          "PlayerApplication"
        ],
        "summary": "Creates a new PlayerApplication and pushes to a Player View",
        "description": "Creates a new PlayerApplication with the attributes specified\r\n<para />\r\nAccessible only to a ContentDeveloper or MSEL owner",
        "operationId": "createAndPushPlayerApplication",
        "requestBody": {
          "description": "The data used to create the PlayerApplication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplication"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplication"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamplayerapplications": {
      "get": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Gets all PlayerApplicationTeams in the system",
        "description": "Returns a list of all of the PlayerApplicationTeams in the system.\r\n<para />",
        "operationId": "getPlayerApplicationTeams",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Creates a new PlayerApplicationTeam",
        "description": "Creates a new PlayerApplicationTeam with the attributes specified\r\n<para />",
        "operationId": "createPlayerApplicationTeam",
        "requestBody": {
          "description": "The data to create the PlayerApplicationTeam with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/teamplayerapplications": {
      "get": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Gets all PlayerApplicationTeams for a MSEL",
        "description": "Returns a list of all of the PlayerApplicationTeams for the msel.",
        "operationId": "getMselPlayerApplicationTeams",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The id of the Msel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/playerapplications/{playerApplicationId}/teamplayerapplications": {
      "get": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Gets all PlayerApplicationTeams for a playerApplication",
        "description": "Returns a list of all of the PlayerApplicationTeams for the playerApplication.",
        "operationId": "getPlayerApplicationPlayerApplicationTeams",
        "parameters": [
          {
            "name": "playerApplicationId",
            "in": "path",
            "description": "The id of the PlayerApplicationTeam",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerApplicationTeam"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamplayerapplications/{id}": {
      "get": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Gets a specific PlayerApplicationTeam by id",
        "description": "Returns the PlayerApplicationTeam with the id specified\r\n<para />",
        "operationId": "getPlayerApplicationTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the PlayerApplicationTeam",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Deletes a PlayerApplicationTeam",
        "description": "Deletes a PlayerApplicationTeam with the specified id\r\n<para />",
        "operationId": "deletePlayerApplicationTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the PlayerApplicationTeam to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/playerapplicationteams/{id}": {
      "put": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Updates a  PlayerApplicationTeam",
        "description": "Updates a PlayerApplicationTeam with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the playerApplicationTeam parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updatePlayerApplicationTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PlayerApplicationTeam to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated PlayerApplicationTeam values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerApplicationTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerApplicationTeam"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}/playerapplications/{playerApplicationId}": {
      "delete": {
        "tags": [
          "PlayerApplicationTeam"
        ],
        "summary": "Deletes a PlayerApplicationTeam by playerApplication ID and team ID",
        "description": "Deletes a PlayerApplicationTeam with the specified playerApplication ID and team ID\r\n<para />",
        "operationId": "deletePlayerApplicationTeamByIds",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of a team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "playerApplicationId",
            "in": "path",
            "description": "ID of a playerApplication.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/scenarioevents": {
      "get": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Gets ScenarioEvents for a MSEL",
        "description": "Returns a list of ScenarioEvents for the MSEL.",
        "operationId": "getScenarioEventsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The ID of the MSEL",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScenarioEvent"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScenarioEvent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScenarioEvent"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/scenarioevents/{id}": {
      "get": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Gets a specific ScenarioEvent by id",
        "description": "Returns the ScenarioEvent with the id specified\r\n<para />\r\nAccessible to a User that is a member of a Team within the specified ScenarioEvent",
        "operationId": "getScenarioEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ScenarioEvent",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Updates an ScenarioEvent",
        "description": "Updates an ScenarioEvent with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent",
        "operationId": "updateScenarioEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ScenarioEvent to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated ScenarioEvent values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Deletes an ScenarioEvent",
        "description": "Deletes an ScenarioEvent with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified ScenarioEvent",
        "operationId": "deleteScenarioEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ScenarioEvent to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/scenarioevents": {
      "post": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Creates a new ScenarioEvent",
        "description": "Creates a new ScenarioEvent with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or an Administrator",
        "operationId": "createScenarioEvent",
        "requestBody": {
          "description": "The data to create the ScenarioEvent with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioEvent"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/scenarioevents/batchdelete": {
      "post": {
        "tags": [
          "ScenarioEvent"
        ],
        "summary": "Deletes multiple ScenarioEvents",
        "description": "Deletes the ScenarioEvents specified",
        "operationId": "batchDeleteScenarioEvents",
        "requestBody": {
          "description": "The list of ScenarioEvent IDs to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Gets all Team in the system",
        "description": "Returns a list of all of the Teams in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getTeams",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Creates a new Team",
        "description": "Creates a new Team with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or an Administrator",
        "operationId": "createTeam",
        "requestBody": {
          "description": "The data to create the Team with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Gets Teams for the current user",
        "description": "Returns a list of the current user's Teams.",
        "operationId": "getMyTeams",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Gets Teams for the specified MSEL",
        "description": "Returns a list of the Teams for the specified MSEL.\r\n<para />",
        "operationId": "getTeamsByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Gets Teams for the specified user",
        "description": "Returns a list of the specified user's Teams.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getTeamsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{id}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Gets a specific Team by id",
        "description": "Returns the Team with the id specified\r\n<para />\r\nAccessible to a SuperUser or a User that is a member of a Team within the specified Team",
        "operationId": "getTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Team",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Team"
        ],
        "summary": "Updates a Team",
        "description": "Updates a Team with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Team",
        "operationId": "updateTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Exericse to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Team values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Deletes a Team",
        "description": "Deletes a Team with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Team within the specified Team",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Team to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/msel/{mselId}/unit/{unitId}": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Creates a new Team for a MSEL from a Unit",
        "description": "Creates a new Team on the specified MSEL from the specified Unit\r\n<para />\r\nAccessible only an Administrator or MSEL Owner",
        "operationId": "createTeamFromUnit",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "description": "The MSEL to create the Team on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "description": "The Unit to create the Team from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/teamusers": {
      "get": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Gets TeamUsers for the specified msel",
        "description": "Returns a list of the specified msel's TeamUsers.\r\n<para />\r\nOnly accessible to an msel user",
        "operationId": "getMselTeamUsers",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}/teamusers": {
      "get": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Gets TeamUsers for the specified team",
        "description": "Returns a list of the specified team's TeamUsers.\r\n<para />\r\nOnly accessible to an msel user",
        "operationId": "getTeamTeamUsers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamUser"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamusers/{id}": {
      "get": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Gets a specific TeamUser by id",
        "description": "Returns the TeamUser with the id specified\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getTeamUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the TeamUser",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Deletes a TeamUser",
        "description": "Deletes a TeamUser with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteTeamUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the TeamUser to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teamusers": {
      "post": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Creates a new TeamUser",
        "description": "Creates a new TeamUser with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createTeamUser",
        "requestBody": {
          "description": "The data to create the TeamUser with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUser"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}/users/{userId}": {
      "delete": {
        "tags": [
          "TeamUser"
        ],
        "summary": "Deletes a TeamUser by user ID and team ID",
        "description": "Deletes a TeamUser with the specified user ID and team ID\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteTeamUserByIds",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of a team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of a user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/units": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Gets all Unit in the system",
        "description": "Returns a list of all of the Units in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUnits",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Unit"
        ],
        "summary": "Creates a new Unit",
        "description": "Creates a new Unit with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or an Administrator",
        "operationId": "createUnit",
        "requestBody": {
          "description": "The data to create the Unit with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/my-units": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Gets Units for the current user",
        "description": "Returns a list of the current user's Units.",
        "operationId": "getMyUnits",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/units": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Gets Units for the specified user",
        "description": "Returns a list of the specified user's Units.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUnitsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/units/{id}": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Gets a specific Unit by id",
        "description": "Returns the Unit with the id specified\r\n<para />\r\nAccessible to a SuperUser or a User that is a member of a Unit within the specified Unit",
        "operationId": "getUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Unit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Unit"
        ],
        "summary": "Updates a Unit",
        "description": "Updates a Unit with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Unit within the specified Unit",
        "operationId": "updateUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Exericse to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Unit values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Unit"
        ],
        "summary": "Deletes a Unit",
        "description": "Deletes a Unit with the specified id\r\n<para />\r\nAccessible only to a SuperUser or a User on an Admin Unit within the specified Unit",
        "operationId": "deleteUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Unit to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/unitusers": {
      "get": {
        "tags": [
          "UnitUser"
        ],
        "summary": "Gets all UnitUsers in the system",
        "description": "Returns a list of all of the UnitUsers in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getAllUnitUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitUser"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitUser"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitUser"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UnitUser"
        ],
        "summary": "Creates a new UnitUser",
        "description": "Creates a new UnitUser with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createUnitUser",
        "requestBody": {
          "description": "The data to create the UnitUser with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnitUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/unitusers/{id}": {
      "get": {
        "tags": [
          "UnitUser"
        ],
        "summary": "Gets a specific UnitUser by id",
        "description": "Returns the UnitUser with the id specified\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUnitUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UnitUser",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitUser"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnitUser"
        ],
        "summary": "Deletes a UnitUser",
        "description": "Deletes a UnitUser with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUnitUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UnitUser to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/units/{unitId}/users/{userId}": {
      "delete": {
        "tags": [
          "UnitUser"
        ],
        "summary": "Deletes a UnitUser by user ID and unit ID",
        "description": "Deletes a UnitUser with the specified user ID and unit ID\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUnitUserByIds",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "ID of a unit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of a user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets all Users in the system",
        "description": "Returns a list of all of the Users in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new User",
        "description": "Creates a new User with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createUser",
        "requestBody": {
          "description": "The data to create the User with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets a specific User by id",
        "description": "Returns the User with the id specified\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates a  User",
        "description": "Updates a User with the attributes specified.\r\nThe ID from the route MUST MATCH the ID contained in the user parameter\r\n<para />\r\nAccessible only to a ContentDeveloper or an Administrator",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the User to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated User values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User",
        "description": "Deletes a User with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the User to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets all Users for a team",
        "description": "Returns a list of all of the Users on the team.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getTeamUsers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The id of the Team",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/units/{unitId}/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets all Users for a unit",
        "description": "Returns a list of all of the Users on the unit.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUnitUsers",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The id of the Unit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/usermselroles": {
      "get": {
        "tags": [
          "UserMselRole"
        ],
        "summary": "Gets all UserMselRoles for the msel",
        "description": "Returns a list of all of the UserMselRoles for the msel.",
        "operationId": "getUserMselRolesByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMselRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMselRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMselRole"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/usermselroles/{id}": {
      "get": {
        "tags": [
          "UserMselRole"
        ],
        "summary": "Gets a specific UserMselRole by id",
        "description": "Returns the UserMselRole with the id specified",
        "operationId": "getUserMselRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserMselRole",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserMselRole"
        ],
        "summary": "Deletes a UserMselRole",
        "description": "Deletes a UserMselRole with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUserMselRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserMselRole to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/usermselroles": {
      "post": {
        "tags": [
          "UserMselRole"
        ],
        "summary": "Creates a new UserMselRole",
        "description": "Creates a new UserMselRole with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createUserMselRole",
        "requestBody": {
          "description": "The data to create the UserMselRole with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMselRole"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMselRole"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserMselRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMselRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/userpermissions": {
      "get": {
        "tags": [
          "UserPermission"
        ],
        "summary": "Gets all UserPermissions in the system",
        "description": "Returns a list of all of the UserPermissions in the system.\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUserPermissions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPermission"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPermission"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPermission"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserPermission"
        ],
        "summary": "Creates a new UserPermission",
        "description": "Creates a new UserPermission with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createUserPermission",
        "requestBody": {
          "description": "The data to create the UserPermission with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPermission"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPermission"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPermission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/userpermissions/{id}": {
      "get": {
        "tags": [
          "UserPermission"
        ],
        "summary": "Gets a specific UserPermission by id",
        "description": "Returns the UserPermission with the id specified\r\n<para />\r\nOnly accessible to a SuperUser",
        "operationId": "getUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserPermission",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserPermission"
        ],
        "summary": "Deletes a UserPermission",
        "description": "Deletes a UserPermission with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUserPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserPermission to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/permissions/{permissionId}": {
      "delete": {
        "tags": [
          "UserPermission"
        ],
        "summary": "Deletes a UserPermission by user ID and permission ID",
        "description": "Deletes a UserPermission with the specified user ID and permission ID\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUserPermissionByIds",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of a user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "ID of a permission.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/msels/{mselId}/userteamroles": {
      "get": {
        "tags": [
          "UserTeamRole"
        ],
        "summary": "Gets all UserTeamRoles for the msel",
        "description": "Returns a list of all of the UserTeamRoles for the msel.",
        "operationId": "getUserTeamRolesByMsel",
        "parameters": [
          {
            "name": "mselId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTeamRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTeamRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTeamRole"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/userteamroles/{id}": {
      "get": {
        "tags": [
          "UserTeamRole"
        ],
        "summary": "Gets a specific UserTeamRole by id",
        "description": "Returns the UserTeamRole with the id specified",
        "operationId": "getUserTeamRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserTeamRole",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserTeamRole"
        ],
        "summary": "Deletes a UserTeamRole",
        "description": "Deletes a UserTeamRole with the specified id\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "deleteUserTeamRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the UserTeamRole to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/userteamroles": {
      "post": {
        "tags": [
          "UserTeamRole"
        ],
        "summary": "Creates a new UserTeamRole",
        "description": "Creates a new UserTeamRole with the attributes specified\r\n<para />\r\nAccessible only to a SuperUser",
        "operationId": "createUserTeamRole",
        "requestBody": {
          "description": "The data to create the UserTeamRole with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTeamRole"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTeamRole"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserTeamRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTeamRole"
                }
              }
            }
          },
          "default": {
            "description": "Problem response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "embeddable": {
            "type": "boolean"
          },
          "loadInBackground": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "minSupportedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "maxSupportedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "algorithmType": {
            "$ref": "#/components/schemas/CalendarAlgorithmType"
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "eras": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "twoDigitYearMax": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CalendarAlgorithmType": {
        "enum": [
          "Unknown",
          "SolarCalendar",
          "LunarCalendar",
          "LunisolarCalendar"
        ],
        "type": "string"
      },
      "CalendarWeekRule": {
        "enum": [
          "FirstDay",
          "FirstFullWeek",
          "FirstFourDayWeek"
        ],
        "type": "string"
      },
      "CallingConventions": {
        "enum": [
          "Standard",
          "VarArgs",
          "Any",
          "HasThis",
          "ExplicitThis"
        ],
        "type": "string"
      },
      "Card": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "move": {
            "type": "integer",
            "format": "int32"
          },
          "inject": {
            "type": "integer",
            "format": "int32"
          },
          "galleryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isTemplate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CardTeam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cardId": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "isShownOnWall": {
            "type": "boolean"
          },
          "canPostArticles": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Catalog": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "injectTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "isPublic": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parent": {
            "$ref": "#/components/schemas/Catalog"
          },
          "injects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Injectm"
            },
            "nullable": true
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unit"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogInject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "catalogId": {
            "type": "string",
            "format": "uuid"
          },
          "injectId": {
            "type": "string",
            "format": "uuid"
          },
          "inject": {
            "$ref": "#/components/schemas/Injectm"
          }
        },
        "additionalProperties": false
      },
      "CatalogUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "catalogId": {
            "type": "string",
            "format": "uuid"
          },
          "unitId": {
            "type": "string",
            "format": "uuid"
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        },
        "additionalProperties": false
      },
      "CiteAction": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "msel": {
            "$ref": "#/components/schemas/Msel"
          },
          "teamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "moveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "injectNumber": {
            "type": "integer",
            "format": "int32"
          },
          "actionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isTemplate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CiteRole": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "msel": {
            "$ref": "#/components/schemas/Msel"
          },
          "teamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isTemplate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CompareInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "version": {
            "$ref": "#/components/schemas/SortVersion"
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "CultureInfo": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "keyboardLayoutId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "ietfLanguageTag": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "nativeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "englishName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "twoLetterISOLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "threeLetterISOLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "threeLetterWindowsLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "compareInfo": {
            "$ref": "#/components/schemas/CompareInfo"
          },
          "textInfo": {
            "$ref": "#/components/schemas/TextInfo"
          },
          "isNeutralCulture": {
            "type": "boolean",
            "readOnly": true
          },
          "cultureTypes": {
            "$ref": "#/components/schemas/CultureTypes"
          },
          "numberFormat": {
            "$ref": "#/components/schemas/NumberFormatInfo"
          },
          "dateTimeFormat": {
            "$ref": "#/components/schemas/DateTimeFormatInfo"
          },
          "calendar": {
            "$ref": "#/components/schemas/Calendar"
          },
          "optionalCalendars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            },
            "nullable": true,
            "readOnly": true
          },
          "useUserOverride": {
            "type": "boolean"
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CultureTypes": {
        "enum": [
          "NeutralCultures",
          "SpecificCultures",
          "InstalledWin32Cultures",
          "AllCultures",
          "UserCustomCulture",
          "ReplacementCultures",
          "WindowsOnlyCultures",
          "FrameworkCultures"
        ],
        "type": "string"
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataColumn": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/ISite"
          },
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "allowDBNull": {
            "type": "boolean",
            "default": true
          },
          "autoIncrement": {
            "type": "boolean",
            "default": false
          },
          "autoIncrementSeed": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "autoIncrementStep": {
            "type": "integer",
            "format": "int64",
            "default": 1
          },
          "caption": {
            "type": "string",
            "nullable": true
          },
          "columnName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "dataType": {
            "$ref": "#/components/schemas/Type"
          },
          "dateTimeMode": {
            "$ref": "#/components/schemas/DataSetDateTime"
          },
          "defaultValue": {
            "nullable": true
          },
          "expression": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "default": "-1"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "readOnly": {
            "type": "boolean",
            "default": false
          },
          "table": {
            "$ref": "#/components/schemas/DataTable"
          },
          "unique": {
            "type": "boolean",
            "default": false
          },
          "columnMapping": {
            "$ref": "#/components/schemas/MappingType"
          }
        },
        "additionalProperties": false
      },
      "DataField": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "injectTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "$ref": "#/components/schemas/DataFieldType"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "onScenarioEventList": {
            "type": "boolean"
          },
          "onExerciseView": {
            "type": "boolean"
          },
          "isChosenFromList": {
            "type": "boolean"
          },
          "dataOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataOption"
            },
            "nullable": true
          },
          "cellMetadata": {
            "type": "string",
            "nullable": true
          },
          "columnMetadata": {
            "type": "string",
            "nullable": true
          },
          "isInitiallyHidden": {
            "type": "boolean"
          },
          "isOnlyShownToOwners": {
            "type": "boolean"
          },
          "galleryArticleParameter": {
            "type": "string",
            "nullable": true
          },
          "isTemplate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DataFieldType": {
        "enum": [
          "String",
          "Integer",
          "Double",
          "Boolean",
          "DateTime",
          "Organization",
          "Html",
          "Card",
          "SourceType",
          "Team",
          "TeamsMultiple",
          "Status",
          "User",
          "Checkbox",
          "Url",
          "Move",
          "DeliveryMethod"
        ],
        "type": "string"
      },
      "DataOption": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "dataFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "optionName": {
            "type": "string",
            "nullable": true
          },
          "optionValue": {
            "type": "string",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataSet": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "remotingFormat": {
            "$ref": "#/components/schemas/SerializationFormat"
          },
          "schemaSerializationMode": {
            "$ref": "#/components/schemas/SchemaSerializationMode"
          },
          "caseSensitive": {
            "type": "boolean",
            "default": false
          },
          "defaultViewManager": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "enforceConstraints": {
            "type": "boolean",
            "default": true
          },
          "dataSetName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "hasErrors": {
            "type": "boolean",
            "readOnly": true
          },
          "isInitialized": {
            "type": "boolean",
            "readOnly": true
          },
          "locale": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "site": {
            "$ref": "#/components/schemas/ISite"
          },
          "relations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "tables": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataSetDateTime": {
        "enum": [
          "Local",
          "Unspecified",
          "UnspecifiedLocal",
          "Utc"
        ],
        "type": "string"
      },
      "DataTable": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "caseSensitive": {
            "type": "boolean"
          },
          "isInitialized": {
            "type": "boolean",
            "readOnly": true
          },
          "remotingFormat": {
            "$ref": "#/components/schemas/SerializationFormat"
          },
          "childRelations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "columns": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "constraints": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "dataSet": {
            "$ref": "#/components/schemas/DataSet"
          },
          "defaultView": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "displayExpression": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "hasErrors": {
            "type": "boolean",
            "readOnly": true
          },
          "locale": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "minimumCapacity": {
            "type": "integer",
            "format": "int32",
            "default": "50"
          },
          "parentRelations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "primaryKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataColumn"
            },
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "tableName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/ISite"
          }
        },
        "additionalProperties": false
      },
      "DataValue": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "scenarioEventId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "injectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "dataFieldId": {
            "type": "string",
            "format": "uuid"
          },
          "cellMetadata": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateTimeFormatInfo": {
        "type": "object",
        "properties": {
          "amDesignator": {
            "type": "string",
            "nullable": true
          },
          "calendar": {
            "$ref": "#/components/schemas/Calendar"
          },
          "dateSeparator": {
            "type": "string",
            "nullable": true
          },
          "firstDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "calendarWeekRule": {
            "$ref": "#/components/schemas/CalendarWeekRule"
          },
          "fullDateTimePattern": {
            "type": "string",
            "nullable": true
          },
          "longDatePattern": {
            "type": "string",
            "nullable": true
          },
          "longTimePattern": {
            "type": "string",
            "nullable": true
          },
          "monthDayPattern": {
            "type": "string",
            "nullable": true
          },
          "pmDesignator": {
            "type": "string",
            "nullable": true
          },
          "rfC1123Pattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shortDatePattern": {
            "type": "string",
            "nullable": true
          },
          "shortTimePattern": {
            "type": "string",
            "nullable": true
          },
          "sortableDateTimePattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "timeSeparator": {
            "type": "string",
            "nullable": true
          },
          "universalSortableDateTimePattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "yearMonthPattern": {
            "type": "string",
            "nullable": true
          },
          "abbreviatedDayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "shortestDayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "dayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "abbreviatedMonthNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monthNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "nativeCalendarName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "abbreviatedMonthGenitiveNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monthGenitiveNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DigitShapes": {
        "enum": [
          "Context",
          "None",
          "NativeNational"
        ],
        "type": "string"
      },
      "EventAttributes": {
        "enum": [
          "None",
          "SpecialName",
          "RTSpecialName"
        ],
        "type": "string"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        },
        "additionalProperties": false
      },
      "EventType": {
        "enum": [
          "Inject",
          "Information",
          "Facilitation"
        ],
        "type": "string"
      },
      "Exception": {
        "type": "object",
        "properties": {
          "targetSite": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "innerException": {
            "$ref": "#/components/schemas/Exception"
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FieldAttributes": {
        "enum": [
          "PrivateScope",
          "Private",
          "FamANDAssem",
          "Assembly",
          "Family",
          "FamORAssem",
          "Public",
          "FieldAccessMask",
          "Static",
          "InitOnly",
          "Literal",
          "NotSerialized",
          "HasFieldRVA",
          "SpecialName",
          "RTSpecialName",
          "HasFieldMarshal",
          "PinvokeImpl",
          "HasDefault",
          "ReservedMask"
        ],
        "type": "string"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "GenericParameterAttributes": {
        "enum": [
          "None",
          "Covariant",
          "Contravariant",
          "VarianceMask",
          "ReferenceTypeConstraint",
          "NotNullableValueTypeConstraint",
          "DefaultConstructorConstraint",
          "SpecialConstraintMask"
        ],
        "type": "string"
      },
      "HealthReport": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/HealthReportEntry"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          },
          "totalDuration": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false
      },
      "HealthReportEntry": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "exception": {
            "$ref": "#/components/schemas/Exception"
          },
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HealthStatus": {
        "enum": [
          "Unhealthy",
          "Degraded",
          "Healthy"
        ],
        "type": "string"
      },
      "IComponent": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/ISite"
          }
        },
        "additionalProperties": false
      },
      "IContainer": {
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "ISite": {
        "type": "object",
        "properties": {
          "component": {
            "$ref": "#/components/schemas/IComponent"
          },
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InjectType": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "dataFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Injectm": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "injectTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "requiresInjectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "requiresInject": {
            "$ref": "#/components/schemas/Injectm"
          },
          "dataValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "IntegrationType": {
        "enum": [
          "Deploy",
          "Connect"
        ],
        "type": "string"
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "emailDomain": {
            "type": "string",
            "nullable": true
          },
          "expirationDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxUsersAllowed": {
            "type": "integer",
            "format": "int32"
          },
          "userCount": {
            "type": "integer",
            "format": "int32"
          },
          "isTeamLeader": {
            "type": "boolean"
          },
          "wasDeactivated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ItemStatus": {
        "enum": [
          "Pending",
          "Active",
          "Cancelled",
          "Complete",
          "Archived"
        ],
        "type": "string"
      },
      "LayoutKind": {
        "enum": [
          "Sequential",
          "Explicit",
          "Auto"
        ],
        "type": "string"
      },
      "MappingType": {
        "enum": [
          "Element",
          "Attribute",
          "SimpleContent",
          "Hidden"
        ],
        "type": "string"
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberTypes": {
        "enum": [
          "Constructor",
          "Event",
          "Field",
          "Method",
          "Property",
          "TypeInfo",
          "Custom",
          "NestedType",
          "All"
        ],
        "type": "string"
      },
      "MethodAttributes": {
        "enum": [
          "ReuseSlot",
          "Private",
          "FamANDAssem",
          "Assembly",
          "Family",
          "FamORAssem",
          "Public",
          "MemberAccessMask",
          "UnmanagedExport",
          "Static",
          "Final",
          "Virtual",
          "HideBySig",
          "NewSlot",
          "CheckAccessOnOverride",
          "Abstract",
          "SpecialName",
          "RTSpecialName",
          "PinvokeImpl",
          "HasSecurity",
          "RequireSecObject",
          "ReservedMask"
        ],
        "type": "string"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MethodImplAttributes": {
        "enum": [
          "IL",
          "Native",
          "OPTIL",
          "Runtime",
          "Unmanaged",
          "NoInlining",
          "ForwardRef",
          "Synchronized",
          "NoOptimization",
          "PreserveSig",
          "AggressiveInlining",
          "AggressiveOptimization",
          "InternalCall",
          "MaxMethodImplVal"
        ],
        "type": "string"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Move": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "moveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "deltaSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "moveStartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "situationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "situationDescription": {
            "type": "string",
            "nullable": true
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Msel": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MselItemStatus"
          },
          "usePlayer": {
            "type": "boolean"
          },
          "playerViewId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "playerIntegrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "useGallery": {
            "type": "boolean"
          },
          "galleryCollectionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "galleryExhibitId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "galleryIntegrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "useCite": {
            "type": "boolean"
          },
          "citeEvaluationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "citeScoringModelId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "citeIntegrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "useSteamfitter": {
            "type": "boolean"
          },
          "steamfitterScenarioId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "steamfitterIntegrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "isTemplate": {
            "type": "boolean"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "showTimeOnScenarioEventList": {
            "type": "boolean"
          },
          "showTimeOnExerciseView": {
            "type": "boolean"
          },
          "showMoveOnScenarioEventList": {
            "type": "boolean"
          },
          "showMoveOnExerciseView": {
            "type": "boolean"
          },
          "showGroupOnScenarioEventList": {
            "type": "boolean"
          },
          "showGroupOnExerciseView": {
            "type": "boolean"
          },
          "moves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Move"
            },
            "nullable": true
          },
          "dataFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataField"
            },
            "nullable": true
          },
          "scenarioEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScenarioEvent"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "nullable": true
          },
          "userMselRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMselRole"
            },
            "nullable": true
          },
          "headerRowMetadata": {
            "type": "string",
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "nullable": true
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            },
            "nullable": true
          },
          "galleryArticleParameters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "gallerySourceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "citeRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiteRole"
            },
            "nullable": true
          },
          "citeActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiteAction"
            },
            "nullable": true
          },
          "playerApplications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerApplication"
            },
            "nullable": true
          },
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MselPage"
            },
            "nullable": true
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invitation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MselItemStatus": {
        "enum": [
          "Pending",
          "Entered",
          "Approved",
          "Complete",
          "Deployed",
          "Archived"
        ],
        "type": "string"
      },
      "MselPage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "allCanView": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MselRole": {
        "enum": [
          "Owner",
          "Editor",
          "Approver",
          "MoveEditor",
          "Viewer",
          "Evaluator"
        ],
        "type": "string"
      },
      "MselUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "unitId": {
            "type": "string",
            "format": "uuid"
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        },
        "additionalProperties": false
      },
      "NumberFormatInfo": {
        "type": "object",
        "properties": {
          "currencyDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "currencyDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "currencyGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "numberGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "percentGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "currencyGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "currencySymbol": {
            "type": "string",
            "nullable": true
          },
          "naNSymbol": {
            "type": "string",
            "nullable": true
          },
          "currencyNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "numberNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "percentPositivePattern": {
            "type": "integer",
            "format": "int32"
          },
          "percentNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "negativeInfinitySymbol": {
            "type": "string",
            "nullable": true
          },
          "negativeSign": {
            "type": "string",
            "nullable": true
          },
          "numberDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "numberDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "numberGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "currencyPositivePattern": {
            "type": "integer",
            "format": "int32"
          },
          "positiveInfinitySymbol": {
            "type": "string",
            "nullable": true
          },
          "positiveSign": {
            "type": "string",
            "nullable": true
          },
          "percentDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "percentDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "percentGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "percentSymbol": {
            "type": "string",
            "nullable": true
          },
          "perMilleSymbol": {
            "type": "string",
            "nullable": true
          },
          "nativeDigits": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "digitSubstitution": {
            "$ref": "#/components/schemas/DigitShapes"
          }
        },
        "additionalProperties": false
      },
      "Organization": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isTemplate": {
            "type": "boolean"
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParameterAttributes": {
        "enum": [
          "None",
          "In",
          "Out",
          "Lcid",
          "Retval",
          "Optional",
          "HasDefault",
          "HasFieldMarshal",
          "Reserved3",
          "Reserved4",
          "ReservedMask"
        ],
        "type": "string"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Permission": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PlayerApplication": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "msel": {
            "$ref": "#/components/schemas/Msel"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "embeddable": {
            "type": "boolean",
            "nullable": true
          },
          "loadInBackground": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerApplicationTeam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "playerApplicationId": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "PropertyAttributes": {
        "enum": [
          "None",
          "SpecialName",
          "RTSpecialName",
          "HasDefault",
          "Reserved2",
          "Reserved3",
          "Reserved4",
          "ReservedMask"
        ],
        "type": "string"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "ScenarioEvent": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "dataValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataValue"
            },
            "nullable": true
          },
          "groupOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isHidden": {
            "type": "boolean"
          },
          "rowMetadata": {
            "type": "string",
            "nullable": true
          },
          "deltaSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "scenarioEventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "injectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SchemaSerializationMode": {
        "enum": [
          "IncludeSchema",
          "ExcludeSchema"
        ],
        "type": "string"
      },
      "ScoringCategory": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "calculationEquation": {
            "type": "string",
            "nullable": true
          },
          "isModifierRequired": {
            "type": "boolean"
          },
          "scoringWeight": {
            "type": "number",
            "format": "double"
          },
          "moveNumberFirstDisplay": {
            "type": "integer",
            "format": "int32"
          },
          "moveNumberLastDisplay": {
            "type": "integer",
            "format": "int32"
          },
          "scoringModelId": {
            "type": "string",
            "format": "uuid"
          },
          "scoringOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoringOption"
            },
            "nullable": true
          },
          "scoringOptionSelection": {
            "$ref": "#/components/schemas/ScoringOptionSelection"
          }
        },
        "additionalProperties": false
      },
      "ScoringModel": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "calculationEquation": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ItemStatus"
          },
          "scoringCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoringCategory"
            },
            "nullable": true
          },
          "hideScoresOnScoreSheet": {
            "type": "boolean"
          },
          "displayCommentTextBoxes": {
            "type": "boolean"
          },
          "displayScoringModelByMoveNumber": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScoringOption": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isModifier": {
            "type": "boolean"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "scoringCategoryId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ScoringOptionSelection": {
        "enum": [
          "Single",
          "Multiple",
          "None"
        ],
        "type": "string"
      },
      "SecurityRuleSet": {
        "enum": [
          "None",
          "Level1",
          "Level2"
        ],
        "type": "string"
      },
      "SerializationFormat": {
        "enum": [
          "Xml",
          "Binary"
        ],
        "type": "string"
      },
      "SortVersion": {
        "type": "object",
        "properties": {
          "fullVersion": {
            "type": "integer",
            "format": "int32"
          },
          "sortId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "Team": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "mselId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "citeTeamTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "playerTeamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "galleryTeamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "citeTeamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "canTeamLeaderInvite": {
            "type": "boolean"
          },
          "canTeamMemberInvite": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "cardTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardTeam"
            },
            "nullable": true
          },
          "playerApplicationTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerApplicationTeam"
            },
            "nullable": true
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invitation"
            },
            "nullable": true
          },
          "userTeamRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTeamRole"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TeamRole": {
        "enum": [
          "Observer",
          "Inviter",
          "Incrementer",
          "Modifier",
          "Submitter"
        ],
        "type": "string"
      },
      "TeamType": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "showTeamTypeAverage": {
            "type": "boolean"
          },
          "isOfficialScoreContributor": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TeamUser": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TextInfo": {
        "type": "object",
        "properties": {
          "ansiCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "oemCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "macCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ebcdicCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "cultureName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "listSeparator": {
            "type": "string",
            "nullable": true
          },
          "isRightToLeft": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeAttributes": {
        "enum": [
          "NotPublic",
          "Public",
          "NestedPublic",
          "NestedPrivate",
          "NestedFamily",
          "NestedAssembly",
          "NestedFamANDAssem",
          "NestedFamORAssem",
          "SequentialLayout",
          "ExplicitLayout",
          "LayoutMask",
          "Interface",
          "Abstract",
          "Sealed",
          "SpecialName",
          "RTSpecialName",
          "Import",
          "Serializable",
          "WindowsRuntime",
          "UnicodeClass",
          "AutoClass",
          "CustomFormatClass",
          "HasSecurity",
          "ReservedMask",
          "BeforeFieldInit",
          "CustomFormatMask"
        ],
        "type": "string"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Unit": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnitUser": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "unitId": {
            "type": "string",
            "format": "uuid"
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserMselRole": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mselId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/MselRole"
          }
        },
        "additionalProperties": false
      },
      "UserPermission": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "permissionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UserTeamRole": {
        "type": "object",
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "dateModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/TeamRole"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://localhost:8080/realms/crucible/protocol/openid-connect/auth",
            "tokenUrl": "http://localhost:8080/realms/crucible/protocol/openid-connect/token",
            "scopes": {
              "blueprint player player-vm cite gallery steamfitter": "public api access"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "blueprint player player-vm cite gallery steamfitter"
      ]
    }
  ]
}